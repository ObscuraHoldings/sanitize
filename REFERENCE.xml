This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    config.yml
    default.yml
  workflows/
    build-linux.yml
    build-macos.yml
    build-snapcraft.yml
    build-windows.yml
    close-issues.yml
    codeql-analysis.yml
    pr-test-build-linux.yml
    pr-test-build-macos.yml
    pr-test-build-windows.yml
  dependabot.yml
images/
  key.svg
  logo.svg
src/
  go.mod
  Picocrypt.go
  README.md
.gitignore
Changelog.md
CODEOWNERS
Internals.md
LICENSE
README.md
VERSION
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/config.yml">
blank_issues_enabled: false
</file>

<file path=".github/ISSUE_TEMPLATE/default.yml">
name: Default template
description: The default template for all issues
body:
  - type: markdown
    attributes:
      value: |
        # Rules
  - type: markdown
    attributes:
      value: |
        **🚨🚨🚨Please read this section carefully and *COMPLETELY*.🚨🚨🚨**
  - type: markdown
    attributes:
      value: |
        **You may be blocked from this repository if you violate the rules.**
  - type: markdown
    attributes:
      value: |
        Picocrypt is a "finished" piece of software and is in a maintenance-only stage. This does not mean the software is old, outdated, or abandonware, but that the sole focus is on fixing bugs and ensuring the software continues to work smoothly as opposed to actively developing new features. As well, my time as the developer is very limited considering that Picocrypt brings me no monetary benefit and is entirely a gift of my time and skill to the community.
  - type: markdown
    attributes:
      value: |
        *Therefore, to save me time so that I can focus on the important things, please follow the guidelines below depending on your topic.*
  - type: markdown
    attributes:
      value: |
        ### Bug reports or security issues
  - type: markdown
    attributes:
      value: |
        These are important; make the issue with a short description, and then once the issue is created, add a comment with as many details as possible. Ping me (@HACKERALERT) in the comment so that I can get to it as soon as possible. Keep in mind that I define "bug" as something wrong with Picocrypt's code itself. If it's not Picocrypt's fault, it's not a bug.
  - type: markdown
    attributes:
      value: |
        ### Problems running/starting Picocrypt
  - type: markdown
    attributes:
      value: |
        Usually these issues are not directly caused by Picocrypt's code. If you're on Windows, see [here](https://github.com/Picocrypt/Picocrypt/issues/91). If you're on Linux, install some packages and try again (see [here](https://github.com/Picocrypt/Picocrypt/tree/main/src#1-prerequisites)). Picocrypt only targets Windows 11, Ubuntu 24/Debian 12, and macOS 15 or later, so *do not create an issue if your OS is older than those; that is your problem, not mine*. If none of the points above help, create the issue and in a separate comment, provide details about the environment you're running in (like OS, DE, etc.). **Do not ping me initially.** Let the issue sit for at least *5 days* to allow other users to potentially help you resolve the issue. If after 5 days, you haven't figured things out, then you may ping me (@HACKERALERT).
  - type: markdown
    attributes:
      value: |
        ### Picocrypt is crashing
  - type: markdown
    attributes:
      value: |
        This is almost always caused by input/output files being in locations where you don't have the correct read/write permissions. Try working within your user/home folder only and copy to/from other places to see if that resolves the crash. If not, run Picocrypt from the command line (e.g. `Picocrypt.exe` or `./Picocrypt`) so you can read the crash message. If you still can't fix the crash, create an issue and ping me (@HACKERALERT).
  - type: markdown
    attributes:
      value: |
        ### Antivirus problems
  - type: markdown
    attributes:
      value: |
        These are unpreventable; report them as false positives to your antivirus software provider and **do not create an issue about it**.
  - type: markdown
    attributes:
      value: |
        ### Support requests/usage questions
  - type: markdown
    attributes:
      value: |
        Create the issue and ask your question or support request in a separate comment. **Do not ping me initially.** Let the issue sit for at least *10 days* to give other users a chance to help you first. If after 10 days, you have not received any assistance, then you may ping me (@HACKERALERT).
  - type: markdown
    attributes:
      value: |
        ### Feature requests/suggestions
  - type: markdown
    attributes:
      value: |
        Picocrypt is mature software; I do not intend to add any new features. **Do not create these types of issues.**
  - type: markdown
    attributes:
      value: |
        ### Performance issues/improvements
  - type: markdown
    attributes:
      value: |
        Picocrypt prioritizes correctness and reliability over performance, so many parts of the code are written sequentially and don't use concurrency. This is intentional and need not be pointed out. Unless performance is absolutely atrocious to the point where it is indicative of a potential bug, **do not make issues about performance**.
  - type: markdown
    attributes:
      value: |
        ### Other issues/generic topics
  - type: markdown
    attributes:
      value: |
        You will have to use your best judgement here. Read the sections above to get an idea of what I expect to see and do what you think is best. Ideally, ping me only if sufficient time has passed for other users to assist/answer you, or it is best addressed by me directly. You must first look through existing issues or do a web search (AI can help!) before creating the issue. While I am allowing these generic issues to be made, if they become a hassle, I reserve the right to disallow them in the future.
  - type: checkboxes
    id: confirmation
    attributes:
      label: "Please confirm:"
      options:
        - label: "**I have carefully read and understand *ALL* of the rules outlined above**"
          required: true
        - label: "I will provide as many helpful details as possible"
          required: true
        - label: "I acknowledge my issue may be ignored or closed without explanation"
          required: true
        - label: "I have looked through previous issues and related info already"
          required: true
        - label: "I will remember to close my issue when it is resolved"
          required: true
  - type: input
    id: summary
    attributes:
      label: "Describe the issue briefly in a few sentences:"
      description: "You can add more details in a separate comment after creating the issue."
    validations:
      required: true
</file>

<file path=".github/workflows/build-linux.yml">
name: build-linux

permissions:
  contents: write

on:
  push:
    paths:
      - "VERSION"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install packages
      run: |
        sudo apt install -y gcc xorg-dev libgtk-3-dev libgl1-mesa-dev libglu1-mesa wget

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w" -o Picocrypt Picocrypt.go
      env:
        CGO_ENABLED: 1
        GOAMD64: v1

    - name: Compress with upx
      run: |
        wget -O upx.tar.xz https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-amd64_linux.tar.xz
        tar -xf upx.tar.xz
        upx-5.0.2-amd64_linux/upx --lzma src/Picocrypt

    - name: Package as .deb
      run: |
        wget https://github.com/user-attachments/files/16136712/Picocrypt.zip
        python -m zipfile -e Picocrypt.zip Picocrypt
        cp src/Picocrypt Picocrypt/Picocrypt/usr/bin/picocrypt-gui
        VERSION=$(cat VERSION)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version: $VERSION" >> Picocrypt/Picocrypt/DEBIAN/control
        echo "Version=$VERSION" >> Picocrypt/Picocrypt/usr/share/applications/picocrypt.desktop
        cd Picocrypt
        dpkg-deb -Zxz --build --root-owner-group Picocrypt

    - name: Prepare to upload artifacts
      run: |
        mkdir out
        mv src/Picocrypt out
        mv Picocrypt/Picocrypt.deb out
        rm -rf src
        rm -rf Picocrypt
        mv out/Picocrypt .
        mv out/Picocrypt.deb .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-linux
        path: |
          Picocrypt
          Picocrypt.deb
        if-no-files-found: error
        compression-level: 9

    - name: Generate checksums
      run: |
        echo "CHECKSUM_PICOCRYPT=$(sha256sum Picocrypt | cut -d ' ' -f1)" >> $GITHUB_ENV
        echo "CHECKSUM_DEB=$(sha256sum Picocrypt.deb | cut -d ' ' -f1)" >> $GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          Picocrypt
          Picocrypt.deb
        tag_name: ${{ env.VERSION }}
        make_latest: true
        append_body: true
        body: |
          **Linux:**
          `sha256(Picocrypt)      ${{ env.CHECKSUM_PICOCRYPT }}`
          `sha256(Picocrypt.deb)  ${{ env.CHECKSUM_DEB }}`
</file>

<file path=".github/workflows/build-macos.yml">
name: build-macos

permissions:
  contents: write

on:
  push:
    paths:
      - "VERSION"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-15
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install packages
      run: |
        brew install glfw glew

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w" -o Picocrypt Picocrypt.go
      env:
        CGO_ENABLED: 1

    - name: Package as .app in a .dmg
      run: |
        mv dist/macos/Picocrypt.app.zip .
        unzip -d Picocrypt.app Picocrypt.app.zip
        rm Picocrypt.app.zip
        mv src/Picocrypt Picocrypt.app/Contents/MacOS/Picocrypt
        rm Picocrypt.app/Contents/Resources/icon.icns
        mv dist/macos/iconSmall.icns Picocrypt.app/Contents/Resources/icon.icns
        mkdir out
        cp -R Picocrypt.app out
        hdiutil create Picocrypt.dmg -volname Picocrypt -fs APFS -format UDZO -srcfolder out

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-macos
        path: |
          Picocrypt.dmg
        if-no-files-found: error
        compression-level: 9

    - name: Get version tag
      run: |
        VERSION=$(cat VERSION)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate checksums
      run: |
        HASH=$(shasum -a 256 Picocrypt.dmg | cut -d ' ' -f1)
        echo "CHECKSUM_PICOCRYPT=$HASH" >> $GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          Picocrypt.dmg
        tag_name: ${{ env.VERSION }}
        make_latest: true
        append_body: true
        body: |
          **macOS:**
          `sha256(Picocrypt.dmg)  ${{ env.CHECKSUM_PICOCRYPT }}`
</file>

<file path=".github/workflows/build-snapcraft.yml">
name: build-snapcraft

permissions:
  contents: write

on:
  workflow_dispatch:

jobs:
  build-snapcraft:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Copy Snapcraft files to source
      run: |
        cp -r dist/snapcraft/* src/

    - name: Fix permissions
      run: |
        chmod -R a+rX src

    - name: List contents of src
      run: |
        ls -l src
        ls -l src/snapcraft.yaml || echo "snapcraft.yaml not found"

    - name: Snapcraft
      uses: snapcore/action-build@v1
      with:
        path: src

    - name: Upload .snap artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-snapcraft
        path: |
          src/*.snap
        if-no-files-found: error
        compression-level: 9
</file>

<file path=".github/workflows/build-windows.yml">
name: build-windows

permissions:
  contents: write

on:
  push:
    paths:
      - "VERSION"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w -H=windowsgui -extldflags=-static" -o 1.exe Picocrypt.go
      env:
        CGO_ENABLED: 1
        GOAMD64: v1

    - name: Add icon, manifest, and version info
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile reshacker_setup.zip https://github.com/user-attachments/files/18878075/reshacker_setup.zip
        Expand-Archive -DestinationPath reshacker_setup reshacker_setup.zip
        reshacker_setup/reshacker_setup.exe /SILENT
        Start-Sleep -Seconds 60
        Invoke-Expression "& `"$Env:P`" -open src/1.exe -save src/2.exe -action addoverwrite -res images/key.ico -mask `"ICONGROUP,MAINICON,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/2.exe -save src/3.exe -action addoverwrite -res images/key.ico -mask `"ICONGROUP,GLFW_ICON,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/3.exe -save src/4.exe -action addoverwrite -res dist/windows/manifest.xml -mask `"MANIFEST,1,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open dist/windows/versioninfo.rc -save resources.res -action compile"
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/4.exe -save src/5.exe -action addoverwrite -res resources.res"
        Start-Sleep -Seconds 30
      env:
        P: "C:\\Program Files (x86)\\Resource Hacker\\ResourceHacker.exe"

    - name: Compress with upx
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile upx.zip https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip
        Expand-Archive -DestinationPath upx upx.zip
        upx/upx-5.0.2-win64/upx.exe --lzma -o src/Picocrypt.exe src/5.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-windows
        path: src/*.exe
        if-no-files-found: error
        compression-level: 9

    - name: Get version tag
      shell: pwsh
      run: |
        $version = Get-Content -Path "VERSION"
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Generate checksums
      shell: pwsh
      run: |
        $hash = Get-FileHash "src/Picocrypt.exe" -Algorithm SHA256
        echo "CHECKSUM_PICOCRYPT=$($hash.Hash)" >> $env:GITHUB_ENV

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          src/Picocrypt.exe
        tag_name: ${{ env.VERSION }}
        make_latest: true
        append_body: true
        body: |
          **Windows:**
          `sha256(Picocrypt.exe)  ${{ env.CHECKSUM_PICOCRYPT }}`
</file>

<file path=".github/workflows/close-issues.yml">
name: Close inactive issues
on:
  schedule:
    - cron: "30 1 * * *"
jobs:
  close-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/stale@v9
        with:
          days-before-issue-stale: 30
          days-before-issue-close: 14
          stale-issue-label: "stale"
          stale-issue-message: "This issue is stale because it has been open for 30 days with no activity."
          close-issue-message: "This issue was closed because it has been inactive for 14 days since being marked as stale."
          days-before-pr-stale: -1
          days-before-pr-close: -1
          repo-token: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".github/workflows/codeql-analysis.yml">
name: "CodeQL"
on:
  push:
    paths:
      - "src/*.go"
      - "src/go.mod"
      - "src/go.sum"
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go']
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
</file>

<file path=".github/workflows/pr-test-build-linux.yml">
name: pr-test-build-linux

permissions:
  contents: write

on:
  pull_request:
    branches:
      - main

jobs:
  pr-test-build-linux:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install packages
      run: |
        sudo apt install -y gcc xorg-dev libgtk-3-dev libgl1-mesa-dev libglu1-mesa wget

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w" -o Picocrypt Picocrypt.go
      env:
        CGO_ENABLED: 1
        GOAMD64: v1

    - name: Compress with upx
      run: |
        wget -O upx.tar.xz https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-amd64_linux.tar.xz
        tar -xf upx.tar.xz
        upx-5.0.2-amd64_linux/upx --lzma src/Picocrypt

    - name: Package as .deb
      run: |
        wget https://github.com/user-attachments/files/16136712/Picocrypt.zip
        python -m zipfile -e Picocrypt.zip Picocrypt
        cp src/Picocrypt Picocrypt/Picocrypt/usr/bin/picocrypt-gui
        VERSION=$(cat VERSION)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version: $VERSION" >> Picocrypt/Picocrypt/DEBIAN/control
        echo "Version=$VERSION" >> Picocrypt/Picocrypt/usr/share/applications/picocrypt.desktop
        cd Picocrypt
        dpkg-deb -Zxz --build --root-owner-group Picocrypt

    - name: Prepare to upload artifacts
      run: |
        mkdir out
        mv src/Picocrypt out
        mv Picocrypt/Picocrypt.deb out
        rm -rf src
        rm -rf Picocrypt
        mv out/Picocrypt .
        mv out/Picocrypt.deb .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pr-test-build-linux-ONLY-FOR-TESTING
        path: |
          Picocrypt
          Picocrypt.deb
        if-no-files-found: error
        compression-level: 9
</file>

<file path=".github/workflows/pr-test-build-macos.yml">
name: pr-test-build-macos

permissions:
  contents: write

on:
  pull_request:
    branches:
      - main

jobs:
  pr-test-build-macos:
    runs-on: macos-15
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install packages
      run: |
        brew install glfw glew

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w" -o Picocrypt Picocrypt.go
      env:
        CGO_ENABLED: 1

    - name: Package as .app in a .dmg
      run: |
        mv dist/macos/Picocrypt.app.zip .
        unzip -d Picocrypt.app Picocrypt.app.zip
        rm Picocrypt.app.zip
        mv src/Picocrypt Picocrypt.app/Contents/MacOS/Picocrypt
        rm Picocrypt.app/Contents/Resources/icon.icns
        mv dist/macos/iconSmall.icns Picocrypt.app/Contents/Resources/icon.icns
        mkdir out
        cp -R Picocrypt.app out
        hdiutil create Picocrypt.dmg -volname Picocrypt -fs APFS -format UDZO -srcfolder out

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pr-test-build-macos-ONLY-FOR-TESTING
        path: |
          Picocrypt.dmg
        if-no-files-found: error
        compression-level: 9
</file>

<file path=".github/workflows/pr-test-build-windows.yml">
name: pr-test-build-windows

permissions:
  contents: write

on:
  pull_request:
    branches:
      - main

jobs:
  pr-test-build-windows:
    runs-on: windows-2025
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
        check-latest: true
        cache: false

    - name: Install dependencies
      run: |
        cd src
        go mod download

    - name: Build
      run: |
        cd src
        go build -v -ldflags="-s -w -H=windowsgui -extldflags=-static" -o 1.exe Picocrypt.go
      env:
        CGO_ENABLED: 1
        GOAMD64: v1

    - name: Add icon, manifest, and version info
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile reshacker_setup.zip https://github.com/user-attachments/files/18878075/reshacker_setup.zip
        Expand-Archive -DestinationPath reshacker_setup reshacker_setup.zip
        reshacker_setup/reshacker_setup.exe /SILENT
        Start-Sleep -Seconds 60
        Invoke-Expression "& `"$Env:P`" -open src/1.exe -save src/2.exe -action addoverwrite -res images/key.ico -mask `"ICONGROUP,MAINICON,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/2.exe -save src/3.exe -action addoverwrite -res images/key.ico -mask `"ICONGROUP,GLFW_ICON,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/3.exe -save src/4.exe -action addoverwrite -res dist/windows/manifest.xml -mask `"MANIFEST,1,`""
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open dist/windows/versioninfo.rc -save resources.res -action compile"
        Start-Sleep -Seconds 30
        Invoke-Expression "& `"$Env:P`" -open src/4.exe -save src/5.exe -action addoverwrite -res resources.res"
        Start-Sleep -Seconds 30
      env:
        P: "C:\\Program Files (x86)\\Resource Hacker\\ResourceHacker.exe"

    - name: Compress with upx
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile upx.zip https://github.com/upx/upx/releases/download/v5.0.2/upx-5.0.2-win64.zip
        Expand-Archive -DestinationPath upx upx.zip
        upx/upx-5.0.2-win64/upx.exe --lzma -o src/Picocrypt.exe src/5.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: pr-test-build-windows-ONLY-FOR-TESTING
        path: src/*.exe
        if-no-files-found: error
        compression-level: 9
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  - package-ecosystem: "gomod"
    directory: "src/"
    schedule:
      interval: "daily"
</file>

<file path="images/key.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="140" height="140" overflow="hidden"><defs><clipPath id="A"><path d="M143 118h140v140H143z"/></clipPath><linearGradient x1="143" y1="188" x2="283" y2="188" gradientUnits="userSpaceOnUse" spreadMethod="pad" id="B"><stop offset="0" stop-color="#00f2fe"/><stop offset=".021" stop-color="#03effe"/><stop offset=".293" stop-color="#24d2fe"/><stop offset=".554" stop-color="#3cbdfe"/><stop offset=".796" stop-color="#4ab0fe"/><stop offset="1" stop-color="#4facfe"/></linearGradient></defs><g clip-path="url(#A)" transform="translate(-143 -118)"><path d="M233.781 156.296c0-4.832 3.918-8.75 8.75-8.75a8.75 8.75 0 1 1 0 17.5 8.75 8.75 0 0 1-8.75-8.75zM178 252.513v-9.844h9.844a5.47 5.47 0 0 0 5.468-5.469v-9.843h9.844a5.47 5.47 0 0 0 5.469-5.469 5.47 5.47 0 0 0-5.469-5.469h-15.312a5.47 5.47 0 0 0-5.469 5.469v9.844h-9.844a5.47 5.47 0 0 0-5.469 5.469v9.843h-13.124v-16.328l48.494-48.495a5.47 5.47 0 0 0 .809-6.704 88.53 88.53 0 0 1-5.174-9.922c-1.804-4.058-.885-8.906 2.288-12.063l21.475-21.375c3.065-3.051 7.659-4.024 11.702-2.479 6.35 2.427 15.501 6.894 23.039 14.397 7.584 7.548 12.201 16.834 14.738 23.296a10.86 10.86 0 0 1-2.451 11.672l-21.735 21.633c-3.164 3.15-7.889 4.07-12.035 2.346-3.42-1.423-6.732-3.112-9.844-5.022a5.47 5.47 0 0 0-7.521 1.8 5.47 5.47 0 0 0 1.8 7.522c3.596 2.207 7.42 4.158 11.364 5.798 8.242 3.429 17.643 1.586 23.952-4.692l21.734-21.632c6.165-6.136 8.095-15.33 4.917-23.423-2.921-7.435-8.276-18.165-17.204-27.05-8.896-8.855-19.511-14.057-26.85-16.862a21.99 21.99 0 0 0-23.323 4.944l-21.475 21.375c-6.366 6.336-8.2 16.085-4.566 24.259 1.127 2.535 2.353 5.015 3.663 7.411l-47.133 47.133a5.47 5.47 0 0 0-1.602 3.868v24.062a5.47 5.47 0 0 0 5.469 5.469h24.062a5.47 5.47 0 0 0 5.469-5.469z" fill="url(#B)"/></g></svg>
</file>

<file path="images/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="1280" height="480" overflow="hidden"><defs><clipPath id="A"><path d="M0 0h1280v480H0z"/></clipPath><clipPath id="B"><path d="M143 118h140v140H143z"/></clipPath><clipPath id="C"><path d="M143 118h140v140H143z"/></clipPath><clipPath id="D"><path d="M143 118h140v140H143z"/></clipPath><linearGradient x1="143" y1="188" x2="283" y2="188" gradientUnits="userSpaceOnUse" spreadMethod="pad" id="E"><stop offset="0" stop-color="#00f2fe"/><stop offset=".021" stop-color="#03effe"/><stop offset=".293" stop-color="#24d2fe"/><stop offset=".554" stop-color="#3cbdfe"/><stop offset=".796" stop-color="#4ab0fe"/><stop offset="1" stop-color="#4facfe"/></linearGradient><path id="F" d="M530.946 258.316q-10.808 0-19.3-3.667-8.492-3.667-14.282-10.422-5.79-6.948-8.878-16.598-3.088-9.843-3.088-21.809 0-11.966 3.088-21.616 3.088-9.843 8.878-16.598 5.79-6.948 14.282-10.615 8.492-3.667 19.3-3.667 15.054 0 24.704 6.755 9.65 6.755 14.089 17.949l-17.37 8.106q-2.123-6.948-7.527-11.001-5.211-4.246-13.896-4.246-11.58 0-17.563 7.334-5.79 7.141-5.79 18.721v17.949q0 11.58 5.79 18.914 5.983 7.141 17.563 7.141 9.264 0 14.668-4.439 5.597-4.632 8.878-12.159l16.019 8.492q-5.018 12.352-15.054 18.914-10.036 6.562-24.511 6.562z"/><path id="G" d="M204.466 353v-32.768h3.648v5.888h.256q.96-2.304 3.264-4.096 2.304-1.792 6.528-1.792h2.176v3.584h-2.88q-4.096 0-6.72 1.792-2.624 1.792-2.624 4.992V353z"/><path id="H" d="M247.794 320.232h3.712l-15.168 41.984q-.768 2.048-1.856 2.816-1.088.768-3.584.768h-3.712v-3.2h5.504l3.136-8.64-12.16-33.728h3.84l10.048 28.864h.256z"/><path id="I" d="M283.25 353.768q-4.288 0-7.36-1.6-3.008-1.6-5.248-4.672l2.688-2.112q2.048 2.688 4.48 3.968 2.432 1.28 5.696 1.28 3.776 0 5.824-1.6 2.048-1.6 2.048-4.608 0-2.624-1.6-4.096-1.536-1.536-5.12-2.048l-2.688-.448q-2.24-.32-4.096-.96-1.856-.64-3.2-1.728-1.28-1.088-2.048-2.624-.704-1.6-.704-3.84 0-2.304.832-4.032.896-1.728 2.368-2.88 1.472-1.152 3.52-1.728 2.048-.576 4.416-.576 4.096 0 6.72 1.408 2.624 1.408 4.48 3.648l-2.432 2.24q-1.28-1.536-3.456-2.816-2.112-1.344-5.504-1.344-3.52 0-5.504 1.536-1.92 1.536-1.92 4.352 0 2.88 1.728 4.16 1.792 1.28 5.312 1.856l2.624.384q4.992.768 7.36 3.008 2.432 2.176 2.432 6.144 0 4.608-3.136 7.168-3.072 2.56-8.512 2.56z"/><path id="J" d="M304.498 353v-32.768h3.648v5.184h.192q.512-1.216 1.28-2.24.768-1.088 1.856-1.92 1.088-.832 2.56-1.28 1.536-.512 3.584-.512 3.52 0 6.208 1.664 2.688 1.664 3.904 5.248h.192q.896-2.88 3.392-4.864 2.56-2.048 6.912-2.048 5.248 0 8.064 3.264 2.816 3.2 2.816 9.216V353h-3.648v-20.416q0-9.856-8.256-9.856-1.728 0-3.264.448-1.536.448-2.752 1.408-1.152.896-1.856 2.304-.704 1.344-.704 3.136V353h-3.648v-20.416q0-9.856-8.192-9.856-1.664 0-3.264.448-1.536.448-2.752 1.344-1.216.896-1.92 2.304-.704 1.344-.704 3.136V353z"/><path id="K" d="M398.321 353q-1.984 0-3.008-1.088-1.024-1.088-1.024-2.88V305.64h3.648v44.16h5.056v3.2z"/><path id="L" d="M430.385 347.112q1.6 0 2.304.832.768.832.768 2.112v.832q0 2.688-1.536 5.696-1.472 3.072-3.968 5.248h-3.072q2.112-2.176 3.2-4.224 1.152-2.048 1.536-4.16-1.28-.128-1.792-.832-.512-.768-.512-1.792v-.768q0-1.28.704-2.112.768-.832 2.368-.832z"/><path id="M" d="M501.489 353.768q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728h-24.256v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832z"/></defs><g clip-path="url(#A)"><path d="M0 0h1280v480H0z" fill="#fff"/><path d="M321.541 256V121.286h57.9q18.721 0 28.95 11.001 10.229 11.001 10.229 29.529 0 18.528-10.229 29.529-10.229 11.001-28.95 11.001H343.35V256zm21.809-72.761h34.74q8.299 0 12.931-4.246 4.632-4.439 4.632-12.545v-9.264q0-8.106-4.632-12.352-4.632-4.439-12.931-4.439h-34.74zm108.273-45.548q-6.562 0-9.65-3.088-2.895-3.088-2.895-7.913v-3.281q0-4.825 2.895-7.913 3.088-3.088 9.65-3.088 6.562 0 9.457 3.088 2.895 3.088 2.895 7.913v3.281q0 4.825-2.895 7.913-2.895 3.088-9.457 3.088zm-10.615 17.949h21.037V256h-21.037z"/><use xlink:href="#F"/><path d="M628.796 258.316q-10.422 0-19.107-3.667-8.492-3.667-14.475-10.422-5.983-6.948-9.264-16.598-3.281-9.843-3.281-21.809 0-11.966 3.281-21.616 3.281-9.843 9.264-16.598 5.983-6.948 14.475-10.615 8.685-3.667 19.107-3.667 10.422 0 18.914 3.667 8.685 3.667 14.668 10.615 5.983 6.755 9.264 16.598 3.281 9.65 3.281 21.616 0 11.966-3.281 21.809-3.281 9.65-9.264 16.598-5.983 6.755-14.668 10.422-8.492 3.667-18.914 3.667zm0-17.37q10.808 0 17.37-6.562 6.562-6.755 6.562-20.072v-16.984q0-13.317-6.562-19.879-6.562-6.755-17.37-6.755-10.808 0-17.37 6.755-6.562 6.562-6.562 19.879v16.984q0 13.317 6.562 20.072 6.562 6.562 17.37 6.562zm108.273 17.37q-10.808 0-19.3-3.667-8.492-3.667-14.282-10.422-5.79-6.948-8.878-16.598-3.088-9.843-3.088-21.809 0-11.966 3.088-21.616 3.088-9.843 8.878-16.598 5.79-6.948 14.282-10.615 8.492-3.667 19.3-3.667 15.054 0 24.704 6.755 9.65 6.755 14.089 17.949l-17.37 8.106q-2.123-6.948-7.527-11.001-5.211-4.246-13.896-4.246-11.58 0-17.563 7.334-5.79 7.141-5.79 18.721v17.949q0 11.58 5.79 18.914 5.983 7.141 17.563 7.141 9.264 0 14.668-4.439 5.597-4.632 8.878-12.159l16.019 8.492q-5.018 12.352-15.054 18.914-10.036 6.562-24.511 6.562zM796.706 256V155.64h21.037v19.3h.965q2.123-7.72 8.878-13.51 6.755-5.79 18.721-5.79h5.597v20.265h-8.299q-12.545 0-19.3 4.053-6.562 4.053-6.562 11.966V256zm137.222-100.36h20.265l-42.267 120.239q-1.737 5.018-4.053 8.492-2.123 3.667-5.211 5.79-2.895 2.316-7.141 3.281-4.246 1.158-10.036 1.158h-12.159v-17.177h16.984l5.79-16.984-36.477-104.799h21.037l20.072 59.058 5.79 21.809h.965l6.369-21.809zm37.635 0H992.6v16.598h.965q3.281-9.071 10.615-13.896 7.527-5.018 17.563-5.018 19.107 0 29.529 13.896 10.422 13.703 10.422 38.6 0 24.897-10.422 38.793-10.422 13.703-29.529 13.703-10.036 0-17.563-5.018-7.334-5.018-10.615-13.896h-.965V294.6h-21.037zm43.811 84.534q11.001 0 17.563-6.948 6.562-7.141 6.562-18.721v-17.37q0-11.58-6.562-18.528-6.562-7.141-17.563-7.141-9.65 0-16.212 4.825-6.562 4.632-6.562 12.352v34.354q0 7.72 6.562 12.545 6.562 4.632 16.212 4.632zM1112.453 256q-11.001 0-16.598-5.597-5.597-5.79-5.597-16.212v-61.374h-15.633V155.64h8.492q5.211 0 7.141-2.316 2.123-2.316 2.123-7.527v-17.563h18.914v27.406h21.037v17.177h-21.037v66.006h19.493V256zm-968.275 97l-14.976-44.672h4.16l13.184 40.768h.256l13.312-40.768h4.032L149.042 353zm37.248.768q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728H170.93v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832z"/><use xlink:href="#G"/><use xlink:href="#H"/><use xlink:href="#I"/><use xlink:href="#J"/><path d="M383.089 353q-2.112 0-3.072-1.088-.96-1.088-1.088-2.944v-1.152h-.32q-1.088 2.752-3.584 4.352-2.496 1.6-6.336 1.6-5.184 0-8-2.496-2.816-2.56-2.816-7.168 0-4.352 3.072-6.912 3.136-2.56 10.24-2.56h7.552v-3.84q0-8.128-8.384-8.128-3.264 0-5.44 1.408-2.176 1.344-3.52 3.904l-2.304-1.92q1.344-2.88 4.096-4.736 2.816-1.856 7.296-1.856 5.76 0 8.832 2.88 3.072 2.88 3.072 8.064V349.8h4.416v3.2zm-13.888-2.368q1.984 0 3.712-.512 1.728-.512 3.008-1.408 1.344-.96 2.048-2.24.768-1.344.768-3.008v-6.08h-7.68q-4.928 0-7.168 1.6-2.176 1.536-2.176 4.288v1.536q0 2.88 2.048 4.352 2.048 1.472 5.44 1.472z"/><use xlink:href="#K"/><path d="M414.769 353q-1.984 0-3.008-1.088-1.024-1.088-1.024-2.88V305.64h3.648v44.16h5.056v3.2z"/><use xlink:href="#L"/><path d="M455.153 320.232h3.84l10.048 28.864h.256l9.984-28.864h3.712L471.153 353h-4.16z"/><use xlink:href="#M"/><path d="M524.529 353v-32.768h3.648v5.888h.256q.96-2.304 3.264-4.096 2.304-1.792 6.528-1.792h2.176v3.584h-2.88q-4.096 0-6.72 1.792-2.624 1.792-2.624 4.992V353zm43.328-32.768h3.712l-15.168 41.984q-.768 2.048-1.856 2.816-1.088.768-3.584.768h-3.712v-3.2h5.504l3.136-8.64-12.16-33.728h3.84l10.048 28.864h.256zm35.455 33.536q-4.288 0-7.36-1.6-3.008-1.6-5.248-4.672l2.688-2.112q2.048 2.688 4.48 3.968 2.432 1.28 5.696 1.28 3.776 0 5.824-1.6 2.048-1.6 2.048-4.608 0-2.624-1.6-4.096-1.536-1.536-5.12-2.048l-2.688-.448q-2.24-.32-4.096-.96-1.856-.64-3.2-1.728-1.28-1.088-2.048-2.624-.704-1.6-.704-3.84 0-2.304.832-4.032.896-1.728 2.368-2.88 1.472-1.152 3.52-1.728 2.048-.576 4.416-.576 4.096 0 6.72 1.408 2.624 1.408 4.48 3.648l-2.432 2.24q-1.28-1.536-3.456-2.816-2.112-1.344-5.504-1.344-3.52 0-5.504 1.536-1.92 1.536-1.92 4.352 0 2.88 1.728 4.16 1.792 1.28 5.312 1.856l2.624.384q4.992.768 7.36 3.008 2.432 2.176 2.432 6.144 0 4.608-3.136 7.168-3.072 2.56-8.512 2.56zm23.04-42.432q-1.28 0-1.92-.64-.576-.64-.576-1.664v-.64q0-1.024.576-1.664.64-.64 1.92-.64 1.28 0 1.856.64.64.64.64 1.664v.64q0 1.024-.64 1.664-.576.64-1.856.64zm-1.792 8.896h3.648V353h-3.648zM640.112 353v-32.768h3.648v5.184h.192q.512-1.216 1.28-2.24.768-1.088 1.856-1.92 1.088-.832 2.56-1.28 1.536-.512 3.584-.512 3.52 0 6.208 1.664 2.688 1.664 3.904 5.248h.192q.896-2.88 3.392-4.864 2.56-2.048 6.912-2.048 5.248 0 8.064 3.264 2.816 3.2 2.816 9.216V353h-3.648v-20.416q0-9.856-8.256-9.856-1.728 0-3.264.448-1.536.448-2.752 1.408-1.152.896-1.856 2.304-.704 1.344-.704 3.136V353h-3.648v-20.416q0-9.856-8.192-9.856-1.664 0-3.264.448-1.536.448-2.752 1.344-1.216.896-1.92 2.304-.704 1.344-.704 3.136V353zm56.064-32.768h3.648v5.248h.192q1.216-2.752 3.712-4.352 2.496-1.664 6.272-1.664 6.336 0 9.92 4.48 3.584 4.48 3.584 12.672 0 8.192-3.584 12.672-3.584 4.48-9.92 4.48-3.776 0-6.208-1.6-2.432-1.664-3.776-4.416h-.192V365.8h-3.648zm12.992 30.272q4.928 0 7.68-3.136 2.752-3.136 2.752-8.448v-4.608q0-5.312-2.752-8.448-2.752-3.136-7.68-3.136-1.92 0-3.648.576-1.664.512-2.944 1.472-1.28.96-2.048 2.304-.704 1.344-.704 2.944v12.992q0 1.728.704 3.136.768 1.344 2.048 2.368 1.28.96 2.944 1.472 1.728.512 3.648.512zM736.944 353q-1.984 0-3.008-1.088-1.024-1.088-1.024-2.88V305.64h3.648v44.16h5.056v3.2zm24.576.768q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728h-24.256v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832zm24.064 24.576q1.6 0 2.304.832.768.832.768 2.112v.832q0 2.688-1.536 5.696-1.472 3.072-3.968 5.248h-3.072q2.112-2.176 3.2-4.224 1.152-2.048 1.536-4.16-1.28-.128-1.792-.832-.512-.768-.512-1.792v-.768q0-1.28.704-2.112.768-.832 2.368-.832zm24.768-26.88h3.84l10.048 28.864h.256l9.984-28.864h3.712L826.288 353h-4.16zm46.336 33.536q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728h-24.256v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832zM879.664 353v-32.768h3.648v5.888h.256q.96-2.304 3.264-4.096 2.304-1.792 6.528-1.792h2.176v3.584h-2.88q-4.096 0-6.72 1.792-2.624 1.792-2.624 4.992V353zm43.328-32.768h3.712l-15.168 41.984q-.768 2.048-1.856 2.816-1.088.768-3.584.768h-3.712v-3.2h5.504l3.136-8.64-12.16-33.728h3.84l10.048 28.864h.256zm35.455 33.536q-4.288 0-7.36-1.6-3.008-1.6-5.248-4.672l2.688-2.112q2.048 2.688 4.48 3.968 2.432 1.28 5.696 1.28 3.776 0 5.824-1.6 2.048-1.6 2.048-4.608 0-2.624-1.6-4.096-1.536-1.536-5.12-2.048l-2.688-.448q-2.24-.32-4.096-.96-1.856-.64-3.2-1.728-1.28-1.088-2.048-2.624-.704-1.6-.704-3.84 0-2.304.832-4.032.896-1.728 2.368-2.88 1.472-1.152 3.52-1.728 2.048-.576 4.416-.576 4.096 0 6.72 1.408 2.624 1.408 4.48 3.648l-2.432 2.24q-1.28-1.536-3.456-2.816-2.112-1.344-5.504-1.344-3.52 0-5.504 1.536-1.92 1.536-1.92 4.352 0 2.88 1.728 4.16 1.792 1.28 5.312 1.856l2.624.384q4.992.768 7.36 3.008 2.432 2.176 2.432 6.144 0 4.608-3.136 7.168-3.072 2.56-8.512 2.56zm32.96 0q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728h-24.256v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832zm34.624 31.232q-6.784 0-10.496-4.48-3.648-4.48-3.648-12.672 0-8.192 3.648-12.672 3.712-4.48 10.496-4.48 4.544 0 7.36 1.984 2.816 1.984 4.288 5.248l-3.072 1.536q-1.152-2.688-3.264-4.096-2.048-1.408-5.312-1.408-4.992 0-7.616 3.2-2.624 3.2-2.624 8.384v4.608q0 5.184 2.624 8.384 2.624 3.2 7.616 3.2 3.392 0 5.696-1.472 2.304-1.472 3.712-4.224l2.688 1.792q-1.6 3.264-4.608 5.248-2.944 1.92-7.488 1.92zm40.704-5.952h-.256q-.448 1.152-1.216 2.24-.768 1.088-1.92 1.92-1.152.768-2.752 1.28-1.536.512-3.648.512-5.248 0-8.192-3.2-2.944-3.264-2.944-9.28v-21.056h3.648v20.352q0 5.056 2.176 7.488 2.176 2.432 6.272 2.432 1.728 0 3.264-.448 1.6-.448 2.816-1.344 1.28-.896 1.984-2.24.768-1.408.768-3.264v-22.976h3.648V353h-3.648zm15.552 5.184v-32.768h3.648v5.888h.256q.96-2.304 3.264-4.096 2.304-1.792 6.528-1.792h2.176v3.584h-2.88q-4.096 0-6.72 1.792-2.624 1.792-2.624 4.992V353zm34.368.768q-3.264 0-5.952-1.152-2.624-1.152-4.544-3.328-1.856-2.24-2.88-5.44-.96-3.2-.96-7.232 0-4.032.96-7.168 1.024-3.2 2.88-5.376 1.92-2.24 4.544-3.392 2.624-1.216 5.888-1.216 3.136 0 5.696 1.216 2.56 1.152 4.352 3.264 1.792 2.112 2.752 5.12 1.024 2.944 1.024 6.528v1.728h-24.256v1.6q0 2.56.704 4.736.768 2.112 2.112 3.648 1.408 1.536 3.392 2.432 1.984.832 4.48.832 7.168 0 9.92-6.592l2.688 1.792q-1.536 3.648-4.864 5.824-3.264 2.176-7.936 2.176zm-.064-31.232q-2.368 0-4.288.896-1.92.832-3.328 2.368-1.344 1.536-2.112 3.712-.704 2.112-.704 4.672v.32h20.288v-.512q0-2.56-.704-4.672-.704-2.176-2.048-3.648-1.28-1.472-3.136-2.304-1.792-.832-3.968-.832zm24.064 31.04q-1.6 0-2.368-.768-.704-.832-.704-2.112v-.704q0-1.28.704-2.048.768-.832 2.368-.832 1.536 0 2.304.832.768.768.768 2.048v.704q0 1.28-.768 2.112-.768.768-2.304.768z"/><g clip-path="url(#B)"><g clip-path="url(#C)"><g clip-path="url(#D)"><path d="M233.781 156.296c0-4.832 3.918-8.75 8.75-8.75a8.75 8.75 0 1 1 0 17.5 8.75 8.75 0 0 1-8.75-8.75zM178 252.513v-9.844h9.844a5.47 5.47 0 0 0 5.468-5.469v-9.843h9.844a5.47 5.47 0 0 0 5.469-5.469 5.47 5.47 0 0 0-5.469-5.469h-15.312a5.47 5.47 0 0 0-5.469 5.469v9.844h-9.844a5.47 5.47 0 0 0-5.469 5.469v9.843h-13.124v-16.328l48.494-48.495a5.47 5.47 0 0 0 .809-6.704 88.53 88.53 0 0 1-5.174-9.922c-1.804-4.058-.885-8.906 2.288-12.063l21.475-21.375c3.065-3.051 7.659-4.024 11.702-2.479 6.35 2.427 15.501 6.894 23.039 14.397 7.584 7.548 12.201 16.834 14.738 23.296a10.86 10.86 0 0 1-2.451 11.672l-21.735 21.633c-3.164 3.15-7.889 4.07-12.035 2.346-3.42-1.423-6.732-3.112-9.844-5.022a5.47 5.47 0 0 0-7.521 1.8 5.47 5.47 0 0 0 1.8 7.522c3.596 2.207 7.42 4.158 11.364 5.798 8.242 3.429 17.643 1.586 23.952-4.692l21.734-21.632c6.165-6.136 8.095-15.33 4.917-23.423-2.921-7.435-8.276-18.165-17.204-27.05-8.896-8.855-19.511-14.057-26.85-16.862a21.99 21.99 0 0 0-23.323 4.944l-21.475 21.375c-6.366 6.336-8.2 16.085-4.566 24.259 1.127 2.535 2.353 5.015 3.663 7.411l-47.133 47.133a5.47 5.47 0 0 0-1.602 3.868v24.062a5.47 5.47 0 0 0 5.469 5.469h24.062a5.47 5.47 0 0 0 5.469-5.469z" fill="url(#E)"/></g></g></g></g></svg>
</file>

<file path="src/go.mod">
module Picocrypt

go 1.24.2

require (
	github.com/Picocrypt/dialog v0.0.0-20250412233924-78f7b909315b
	github.com/Picocrypt/giu v0.0.0-20250801020750-ec85cd24c933
	github.com/Picocrypt/imgui-go v0.0.0-20250412235405-d86b230f5fbb
	github.com/Picocrypt/infectious v0.0.0-20250412183341-9f88c6307b39
	github.com/Picocrypt/serpent v0.0.0-20240830233833-9ad6ab254fd7
	github.com/Picocrypt/zxcvbn-go v0.0.0-20250412183938-d59695960527
	golang.org/x/crypto v0.40.0
)

require (
	github.com/Picocrypt/gl v0.0.0-20250412234430-767b58dbf936 // indirect
	github.com/Picocrypt/glfw/v3.3/glfw v0.0.0-20250412234750-7b96bfdb8dd8 // indirect
	github.com/Picocrypt/mainthread v0.0.0-20240831004314-496f638392b3 // indirect
	github.com/Picocrypt/w32 v0.0.0-20240831001500-1183079d4d57 // indirect
	golang.org/x/sys v0.34.0 // indirect
)
</file>

<file path="src/Picocrypt.go">
package main

/*

Picocrypt v1.49
Copyright (c) Evan Su
Released under GPL-3.0-only
https://github.com/Picocrypt/Picocrypt

~ In cryptography we trust ~

*/

import (
	"archive/zip"
	"bytes"
	"crypto/cipher"
	"crypto/hmac"
	"crypto/rand"
	"crypto/subtle"
	"errors"
	"flag"
	"fmt"
	"hash"
	"image"
	"image/color"
	"io"
	"math"
	"math/big"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/Picocrypt/dialog"
	"github.com/Picocrypt/giu"
	"github.com/Picocrypt/imgui-go"
	"github.com/Picocrypt/infectious"
	"github.com/Picocrypt/serpent"
	"github.com/Picocrypt/zxcvbn-go"
	"golang.org/x/crypto/argon2"
	"golang.org/x/crypto/blake2b"
	"golang.org/x/crypto/chacha20"
	"golang.org/x/crypto/hkdf"
	"golang.org/x/crypto/sha3"
)

// Constants
const KiB = 1 << 10
const MiB = 1 << 20
const GiB = 1 << 30
const TiB = 1 << 40

var WHITE = color.RGBA{0xff, 0xff, 0xff, 0xff}
var RED = color.RGBA{0xff, 0x00, 0x00, 0xff}
var GREEN = color.RGBA{0x00, 0xff, 0x00, 0xff}
var YELLOW = color.RGBA{0xff, 0xff, 0x00, 0xff}
var TRANSPARENT = color.RGBA{0x00, 0x00, 0x00, 0x00}

// Generic variables
var window *giu.MasterWindow
var version = "v1.49"
var dpi float32
var mode string
var working bool
var scanning bool

// Popup modals
var modalId int
var showPassgen bool
var showKeyfile bool
var showOverwrite bool
var showProgress bool

// Input and output files
var inputFile string
var inputFileOld string
var outputFile string
var onlyFiles []string
var onlyFolders []string
var allFiles []string
var inputLabel = "Drop files and folders into this window"

// Password and confirm password
var password string
var cpassword string
var passwordStrength int
var passwordState = giu.InputTextFlagsPassword
var passwordStateLabel = "Show"

// Password generator
var passgenLength int32 = 32
var passgenUpper bool
var passgenLower bool
var passgenNums bool
var passgenSymbols bool
var passgenCopy bool

// Keyfile variables
var keyfile bool
var keyfiles []string
var keyfileOrdered bool
var keyfileLabel = "None selected"

// Comments variables
var comments string
var commentsLabel = "Comments:"
var commentsDisabled bool

// Advanced options
var paranoid bool
var reedsolo bool
var deniability bool
var recursively bool
var split bool
var splitSize string
var splitUnits = []string{"KiB", "MiB", "GiB", "TiB", "Total"}
var splitSelected int32 = 1
var recombine bool
var compress bool
var delete bool
var autoUnzip bool
var sameLevel bool
var keep bool
var kept bool

// Status variables
var startLabel = "Start"
var mainStatus = "Ready"
var mainStatusColor = WHITE
var popupStatus string
var requiredFreeSpace int64

// Progress variables
var progress float32
var progressInfo string
var speed float64
var eta string
var canCancel bool

// Reed-Solomon encoders
var rs1, rsErr1 = infectious.NewFEC(1, 3)
var rs5, rsErr2 = infectious.NewFEC(5, 15)
var rs16, rsErr3 = infectious.NewFEC(16, 48)
var rs24, rsErr4 = infectious.NewFEC(24, 72)
var rs32, rsErr5 = infectious.NewFEC(32, 96)
var rs64, rsErr6 = infectious.NewFEC(64, 192)
var rs128, rsErr7 = infectious.NewFEC(128, 136)
var fastDecode bool

// Compression variables and passthrough
var compressDone int64
var compressTotal int64
var compressStart time.Time

type compressorProgress struct {
	io.Reader
}

func (p *compressorProgress) Read(data []byte) (int, error) {
	if !working {
		return 0, io.EOF
	}
	read, err := p.Reader.Read(data)
	compressDone += int64(read)
	progress, speed, eta = statify(compressDone, compressTotal, compressStart)
	if compress {
		popupStatus = fmt.Sprintf("Compressing at %.2f MiB/s (ETA: %s)", speed, eta)
	} else {
		popupStatus = fmt.Sprintf("Combining at %.2f MiB/s (ETA: %s)", speed, eta)
	}
	giu.Update()
	return read, err
}

type encryptedZipWriter struct {
	_w      io.Writer
	_cipher *chacha20.Cipher
}

func (ezw *encryptedZipWriter) Write(data []byte) (n int, err error) {
	dst := make([]byte, len(data))
	ezw._cipher.XORKeyStream(dst, data)
	return ezw._w.Write(dst)
}

type encryptedZipReader struct {
	_r      io.Reader
	_cipher *chacha20.Cipher
}

func (ezr *encryptedZipReader) Read(data []byte) (n int, err error) {
	src := make([]byte, len(data))
	n, err = ezr._r.Read(src)
	if err == nil && n > 0 {
		dst := make([]byte, n)
		ezr._cipher.XORKeyStream(dst, src[:n])
		if copy(data, dst) != n {
			panic(errors.New("built-in copy() function failed"))
		}
	}
	return n, err
}

func onClickStartButton() {
	// Start button should be disabled if these conditions are true; don't do anything if so
	if (len(keyfiles) == 0 && password == "") || (mode == "encrypt" && password != cpassword) {
		return
	}

	if keyfile && keyfiles == nil {
		mainStatus = "Please select your keyfiles"
		mainStatusColor = RED
		giu.Update()
		return
	}
	tmp, err := strconv.Atoi(splitSize)
	if split && (splitSize == "" || err != nil || tmp <= 0) {
		mainStatus = "Invalid chunk size"
		mainStatusColor = RED
		giu.Update()
		return
	}

	// Check if output file already exists
	_, err = os.Stat(outputFile)

	// Check if any split chunks already exist
	if split {
		names, err2 := filepath.Glob(outputFile + ".*")
		if err2 != nil {
			panic(err2)
		}
		if len(names) > 0 {
			err = nil
		} else {
			err = os.ErrNotExist
		}
	}

	// If files already exist, show the overwrite modal
	if err == nil && !recursively {
		showOverwrite = true
		modalId++
		giu.Update()
	} else { // Nothing to worry about, start working
		showProgress = true
		fastDecode = true
		canCancel = true
		modalId++
		giu.Update()
		if !recursively {
			go func() {
				work()
				working = false
				showProgress = false
				giu.Update()
			}()
		} else {
			// Store variables as they will be cleared
			oldPassword := password
			oldKeyfile := keyfile
			oldKeyfiles := keyfiles
			oldKeyfileOrdered := keyfileOrdered
			oldKeyfileLabel := keyfileLabel
			oldComments := comments
			oldParanoid := paranoid
			oldReedsolo := reedsolo
			oldDeniability := deniability
			oldSplit := split
			oldSplitSize := splitSize
			oldSplitSelected := splitSelected
			oldDelete := delete
			files := allFiles
			go func() {
				for _, file := range files {
					// Simulate dropping the file
					onDrop([]string{file})

					// Restore variables and options
					password = oldPassword
					cpassword = oldPassword
					keyfile = oldKeyfile
					keyfiles = oldKeyfiles
					keyfileOrdered = oldKeyfileOrdered
					keyfileLabel = oldKeyfileLabel
					comments = oldComments
					paranoid = oldParanoid
					reedsolo = oldReedsolo
					if mode != "decrypt" {
						deniability = oldDeniability
					}
					split = oldSplit
					splitSize = oldSplitSize
					splitSelected = oldSplitSelected
					delete = oldDelete

					work()
					if !working {
						resetUI()
						cancel(nil, nil)
						showProgress = false
						giu.Update()
						return
					}
				}
				working = false
				showProgress = false
				giu.Update()
			}()
		}
	}
}

// The main user interface
func draw() {
	giu.SingleWindow().Flags(524351).Layout(
		giu.Custom(func() {
			if giu.IsKeyReleased(giu.KeyEnter) {
				onClickStartButton()
				return
			}
			if showPassgen {
				giu.PopupModal("Generate password:##"+strconv.Itoa(modalId)).Flags(6).Layout(
					giu.Row(
						giu.Label("Length:"),
						giu.SliderInt(&passgenLength, 12, 64).Size(giu.Auto),
					),
					giu.Checkbox("Uppercase", &passgenUpper),
					giu.Checkbox("Lowercase", &passgenLower),
					giu.Checkbox("Numbers", &passgenNums),
					giu.Checkbox("Symbols", &passgenSymbols),
					giu.Checkbox("Copy to clipboard", &passgenCopy),
					giu.Row(
						giu.Button("Cancel").Size(100, 0).OnClick(func() {
							giu.CloseCurrentPopup()
							showPassgen = false
						}),
						giu.Style().SetDisabled(!(passgenUpper || passgenLower || passgenNums || passgenSymbols)).To(
							giu.Button("Generate").Size(100, 0).OnClick(func() {
								password = genPassword()
								cpassword = password
								passwordStrength = zxcvbn.PasswordStrength(password, nil).Score

								giu.CloseCurrentPopup()
								showPassgen = false
							}),
						),
					),
				).Build()
				giu.OpenPopup("Generate password:##" + strconv.Itoa(modalId))
				giu.Update()
			}

			if showKeyfile {
				giu.PopupModal("Manage keyfiles:##"+strconv.Itoa(modalId)).Flags(70).Layout(
					giu.Label("Drag and drop your keyfiles here"),
					giu.Custom(func() {
						if mode != "decrypt" {
							giu.Checkbox("Require correct order", &keyfileOrdered).Build()
							giu.Tooltip("Ordering of keyfiles will matter").Build()
						} else if keyfileOrdered {
							giu.Label("Correct ordering is required").Build()
						}
					}),
					giu.Custom(func() {
						if len(keyfiles) > 0 {
							giu.Separator().Build()
						}
						for _, i := range keyfiles {
							giu.Label(filepath.Base(i)).Build()
						}
					}),
					giu.Row(
						giu.Button("Clear").Size(100, 0).OnClick(func() {
							keyfiles = nil
							if keyfile {
								keyfileLabel = "Keyfiles required"
							} else {
								keyfileLabel = "None selected"
							}
							modalId++
							giu.Update()
						}),
						giu.Tooltip("Remove all keyfiles"),

						giu.Button("Done").Size(100, 0).OnClick(func() {
							giu.CloseCurrentPopup()
							showKeyfile = false
						}),
					),
				).Build()
				giu.OpenPopup("Manage keyfiles:##" + strconv.Itoa(modalId))
				giu.Update()
			}

			if showOverwrite {
				giu.PopupModal("Warning:##"+strconv.Itoa(modalId)).Flags(6).Layout(
					giu.Label("Output already exists. Overwrite?"),
					giu.Row(
						giu.Button("No").Size(100, 0).OnClick(func() {
							giu.CloseCurrentPopup()
							showOverwrite = false
						}),
						giu.Button("Yes").Size(100, 0).OnClick(func() {
							giu.CloseCurrentPopup()
							showOverwrite = false

							showProgress = true
							fastDecode = true
							canCancel = true
							modalId++
							giu.Update()
							go func() {
								work()
								working = false
								showProgress = false
								giu.Update()
							}()
						}),
					),
				).Build()
				giu.OpenPopup("Warning:##" + strconv.Itoa(modalId))
				giu.Update()
			}

			if showProgress {
				giu.PopupModal("Progress:##"+strconv.Itoa(modalId)).Flags(6|1<<0).Layout(
					giu.Dummy(0, 0),
					giu.Row(
						giu.ProgressBar(progress).Size(210, 0).Overlay(progressInfo),
						giu.Style().SetDisabled(!canCancel).To(
							giu.Button(func() string {
								if working {
									return "Cancel"
								}
								return "..."
							}()).Size(58, 0).OnClick(func() {
								working = false
								canCancel = false
							}),
						),
					),
					giu.Label(popupStatus),
				).Build()
				giu.OpenPopup("Progress:##" + strconv.Itoa(modalId))
				giu.Update()
			}
		}),

		giu.Row(
			giu.Label(inputLabel),
			giu.Custom(func() {
				bw, _ := giu.CalcTextSize("Clear")
				p, _ := giu.GetWindowPadding()
				bw += p * 2
				giu.Dummy((bw+p)/-dpi, 0).Build()
				giu.SameLine()
				giu.Style().SetDisabled((len(allFiles) == 0 && len(onlyFiles) == 0) || scanning).To(
					giu.Button("Clear").Size(bw/dpi, 0).OnClick(resetUI),
					giu.Tooltip("Clear all input files and reset UI state"),
				).Build()
			}),
		),

		giu.Separator(),
		giu.Style().SetDisabled((len(allFiles) == 0 && len(onlyFiles) == 0) || scanning).To(
			giu.Label("Password:"),
			giu.Row(
				giu.Button(passwordStateLabel).Size(54, 0).OnClick(func() {
					if passwordState == giu.InputTextFlagsPassword {
						passwordState = giu.InputTextFlagsNone
						passwordStateLabel = "Hide"
					} else {
						passwordState = giu.InputTextFlagsPassword
						passwordStateLabel = "Show"
					}
					giu.Update()
				}),
				giu.Tooltip("Toggle the visibility of password entries"),

				giu.Button("Clear").Size(54, 0).OnClick(func() {
					password = ""
					cpassword = ""
					giu.Update()
				}),
				giu.Tooltip("Clear the password entries"),

				giu.Button("Copy").Size(54, 0).OnClick(func() {
					giu.Context.GetPlatform().SetClipboard(password)
					giu.Update()
				}),
				giu.Tooltip("Copy the password into your clipboard"),

				giu.Button("Paste").Size(54, 0).OnClick(func() {
					tmp := giu.Context.GetPlatform().GetClipboard()
					password = tmp
					if mode != "decrypt" {
						cpassword = tmp
					}
					passwordStrength = zxcvbn.PasswordStrength(password, nil).Score
					giu.Update()
				}),
				giu.Tooltip("Paste a password from your clipboard"),

				giu.Style().SetDisabled(mode == "decrypt").To(
					giu.Button("Create").Size(54, 0).OnClick(func() {
						showPassgen = true
						modalId++
						giu.Update()
					}),
				),
				giu.Tooltip("Generate a cryptographically secure password"),
			),
			giu.Row(
				giu.InputText(&password).Flags(passwordState).Size(302/dpi).OnChange(func() {
					passwordStrength = zxcvbn.PasswordStrength(password, nil).Score
					giu.Update()
				}),
				giu.Custom(func() {
					c := giu.GetCanvas()
					p := giu.GetCursorScreenPos()
					col := color.RGBA{
						uint8(0xc8 - 31*passwordStrength),
						uint8(0x4c + 31*passwordStrength), 0x4b, 0xff,
					}
					if password == "" || mode == "decrypt" {
						col = TRANSPARENT
					}
					path := p.Add(image.Pt(
						int(math.Round(-20*float64(dpi))),
						int(math.Round(12*float64(dpi))),
					))
					c.PathArcTo(path, 6*dpi, -math.Pi/2, math.Pi*(.4*float32(passwordStrength)-.1), -1)
					c.PathStroke(col, false, 2)
				}),
			),

			giu.Dummy(0, 0),
			giu.Style().SetDisabled(password == "" || mode == "decrypt").To(
				giu.Label("Confirm password:"),
				giu.Row(
					giu.InputText(&cpassword).Flags(passwordState).Size(302/dpi),
					giu.Custom(func() {
						c := giu.GetCanvas()
						p := giu.GetCursorScreenPos()
						col := color.RGBA{0x4c, 0xc8, 0x4b, 0xff}
						if cpassword != password {
							col = color.RGBA{0xc8, 0x4c, 0x4b, 0xff}
						}
						if password == "" || cpassword == "" || mode == "decrypt" {
							col = TRANSPARENT
						}
						path := p.Add(image.Pt(
							int(math.Round(-20*float64(dpi))),
							int(math.Round(12*float64(dpi))),
						))
						c.PathArcTo(path, 6*dpi, 0, 2*math.Pi, -1)
						c.PathStroke(col, false, 2)
					}),
				),
			),

			giu.Dummy(0, 0),
			giu.Style().SetDisabled(mode == "decrypt" && !keyfile && !deniability).To(
				giu.Row(
					giu.Label("Keyfiles:"),
					giu.Button("Edit").Size(54, 0).OnClick(func() {
						showKeyfile = true
						modalId++
						giu.Update()
					}),
					giu.Tooltip("Manage keyfiles to use for "+(func() string {
						if mode != "decrypt" {
							return "encryption"
						}
						return "decryption"
					}())),

					giu.Style().SetDisabled(mode == "decrypt").To(
						giu.Button("Create").Size(54, 0).OnClick(func() {
							f := dialog.File().Title("Choose where to save the keyfile")
							f.SetStartDir(func() string {
								if len(onlyFiles) > 0 {
									return filepath.Dir(onlyFiles[0])
								}
								return filepath.Dir(onlyFolders[0])
							}())
							f.SetInitFilename("keyfile-" + strconv.Itoa(int(time.Now().Unix())) + ".bin")
							file, err := f.Save()
							if file == "" || err != nil {
								return
							}

							fout, err := os.Create(file)
							if err != nil {
								mainStatus = "Failed to create keyfile"
								mainStatusColor = RED
								giu.Update()
								return
							}
							data := make([]byte, 32)
							if n, err := rand.Read(data); err != nil || n != 32 {
								panic(errors.New("fatal crypto/rand error"))
							}
							n, err := fout.Write(data)
							if err != nil || n != 32 {
								fout.Close()
								panic(errors.New("failed to write full keyfile"))
							}
							if err := fout.Close(); err != nil {
								panic(err)
							} else {
								mainStatus = "Ready"
								mainStatusColor = WHITE
								giu.Update()
								return
							}
						}),
						giu.Tooltip("Generate a cryptographically secure keyfile"),
					),
					giu.Style().SetDisabled(true).To(
						giu.InputText(&keyfileLabel).Size(giu.Auto),
					),
				),
			),
		),

		giu.Separator(),
		giu.Style().SetDisabled(mode != "decrypt" && ((len(keyfiles) == 0 && password == "") || (password != cpassword)) || deniability).To(
			giu.Style().SetDisabled(mode == "decrypt" && (comments == "" || comments == "Comments are corrupted")).To(
				giu.Label(commentsLabel),
				giu.InputText(&comments).Size(giu.Auto).Flags(func() giu.InputTextFlags {
					if commentsDisabled {
						return giu.InputTextFlagsReadOnly
					} else if deniability {
						comments = ""
					}
					return giu.InputTextFlagsNone
				}()),
				giu.Custom(func() {
					if !commentsDisabled {
						giu.Tooltip("Note: comments are not encrypted!").Build()
					}
				}),
			),
		),
		giu.Style().SetDisabled((len(keyfiles) == 0 && password == "") || (mode == "encrypt" && password != cpassword)).To(
			giu.Label("Advanced:"),
			giu.Custom(func() {
				if mode != "decrypt" {
					giu.Row(
						giu.Checkbox("Paranoid mode", &paranoid),
						giu.Tooltip("Provides the highest level of security attainable"),
						giu.Dummy(-170, 0),
						giu.Style().SetDisabled(recursively || !(len(allFiles) > 1 || len(onlyFolders) > 0)).To(
							giu.Checkbox("Compress files", &compress),
							giu.Tooltip("Compress files with Deflate before encrypting"),
						),
					).Build()

					giu.Row(
						giu.Checkbox("Reed-Solomon", &reedsolo),
						giu.Tooltip("Prevent file corruption with erasure coding"),
						giu.Dummy(-170, 0),
						giu.Checkbox("Delete files", &delete),
						giu.Tooltip("Delete the input files after encryption"),
					).Build()

					giu.Row(
						giu.Checkbox("Deniability", &deniability),
						giu.Tooltip("Warning: only use this if you know what it does!"),
						giu.Dummy(-170, 0),
						giu.Style().SetDisabled(!(len(allFiles) > 1 || len(onlyFolders) > 0)).To(
							giu.Checkbox("Recursively", &recursively).OnChange(func() {
								compress = false
							}),
							giu.Tooltip("Warning: only use this if you know what it does!"),
						),
					).Build()

					giu.Row(
						giu.Checkbox("Split into chunks:", &split),
						giu.Tooltip("Split the output file into smaller chunks"),
						giu.Dummy(-170, 0),
						giu.InputText(&splitSize).Size(86/dpi).Flags(2).OnChange(func() {
							split = splitSize != ""
						}),
						giu.Tooltip("Choose the chunk size"),
						giu.Combo("##splitter", splitUnits[splitSelected], splitUnits, &splitSelected).Size(68),
						giu.Tooltip("Choose the chunk units"),
					).Build()
				} else {
					giu.Row(
						giu.Style().SetDisabled(deniability).To(
							giu.Checkbox("Force decrypt", &keep),
							giu.Tooltip("Override security measures when decrypting"),
						),
						giu.Dummy(-170, 0),
						giu.Checkbox("Delete volume", &delete),
						giu.Tooltip("Delete the volume after a successful decryption"),
					).Build()

					giu.Row(
						giu.Style().SetDisabled(!strings.HasSuffix(inputFile, ".zip.pcv")).To(
							giu.Checkbox("Auto unzip", &autoUnzip).OnChange(func() {
								if !autoUnzip {
									sameLevel = false
								}
							}),
							giu.Tooltip("Extract .zip upon decryption (may overwrite files)"),
						),
						giu.Dummy(-170, 0),
						giu.Style().SetDisabled(!autoUnzip).To(
							giu.Checkbox("Same level", &sameLevel),
							giu.Tooltip("Extract .zip contents to same folder as volume"),
						),
					).Build()
				}
			}),

			giu.Style().SetDisabled(recursively).To(
				giu.Label("Save output as:"),
				giu.Custom(func() {
					w, _ := giu.GetAvailableRegion()
					bw, _ := giu.CalcTextSize("Change")
					p, _ := giu.GetWindowPadding()
					bw += p * 2
					dw := w - bw - p
					giu.Style().SetDisabled(true).To(
						giu.InputText(func() *string {
							tmp := ""
							if outputFile == "" {
								return &tmp
							}
							tmp = filepath.Base(outputFile)
							if split {
								tmp += ".*"
							}
							if recursively {
								tmp = "(multiple values)"
							}
							return &tmp
						}()).Size(dw / dpi / dpi).Flags(16384),
					).Build()

					giu.SameLine()
					giu.Button("Change").Size(bw/dpi, 0).OnClick(func() {
						f := dialog.File().Title("Choose where to save the output. Don't include extensions")
						f.SetStartDir(func() string {
							if len(onlyFiles) > 0 {
								return filepath.Dir(onlyFiles[0])
							}
							return filepath.Dir(onlyFolders[0])
						}())

						// Prefill the filename
						tmp := strings.TrimSuffix(filepath.Base(outputFile), ".pcv")
						f.SetInitFilename(strings.TrimSuffix(tmp, filepath.Ext(tmp)))
						if mode == "encrypt" && (len(allFiles) > 1 || len(onlyFolders) > 0 || compress) {
							f.SetInitFilename("encrypted-" + strconv.Itoa(int(time.Now().Unix())))
						}

						// Get the chosen file path
						file, err := f.Save()
						if file == "" || err != nil {
							return
						}
						file = filepath.Join(filepath.Dir(file), strings.Split(filepath.Base(file), ".")[0])

						// Add the correct extensions
						if mode == "encrypt" {
							if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
								file += ".zip.pcv"
							} else {
								file += filepath.Ext(inputFile) + ".pcv"
							}
						} else {
							if strings.HasSuffix(inputFile, ".zip.pcv") {
								file += ".zip"
							} else {
								tmp := strings.TrimSuffix(filepath.Base(inputFile), ".pcv")
								file += filepath.Ext(tmp)
							}
						}
						outputFile = file
						mainStatus = "Ready"
						mainStatusColor = WHITE
						giu.Update()
					}).Build()
					giu.Tooltip("Save the output with a custom name and path").Build()
				}),
			),

			giu.Dummy(0, 0),
			giu.Separator(),
			giu.Dummy(0, 0),
			giu.Button(func() string {
				if !recursively {
					return startLabel
				}
				return "Process"
			}()).Size(giu.Auto, 34).OnClick(onClickStartButton),
			giu.Custom(func() {
				if mainStatus != "Ready" {
					giu.Style().SetColor(giu.StyleColorText, mainStatusColor).To(
						giu.Label(mainStatus),
					).Build()
					return
				}
				if requiredFreeSpace > 0 {
					multiplier := 1
					if len(allFiles) > 1 || len(onlyFolders) > 0 { // need a temporary zip file
						multiplier++
					}
					if deniability {
						multiplier++
					}
					if split {
						multiplier++
					}
					if recombine {
						multiplier++
					}
					if autoUnzip {
						multiplier++
					}
					giu.Style().SetColor(giu.StyleColorText, WHITE).To(
						giu.Label("Ready (ensure >" + sizeify(requiredFreeSpace*int64(multiplier)) + " of disk space is free)"),
					).Build()
				} else {
					giu.Style().SetColor(giu.StyleColorText, WHITE).To(
						giu.Label("Ready"),
					).Build()
				}
			}),
		),

		giu.Custom(func() {
			window.SetSize(int(318*dpi), giu.GetCursorPos().Y+1)
		}),
	)
}

func onDrop(names []string) {
	if showKeyfile {
		keyfiles = append(keyfiles, names...)

		// Make sure keyfiles are accessible, remove duplicates
		var tmp []string
		for _, i := range keyfiles {
			duplicate := false
			for _, j := range tmp {
				if i == j {
					duplicate = true
				}
			}
			stat, statErr := os.Stat(i)
			fin, err := os.Open(i)
			if err == nil {
				fin.Close()
			} else {
				showKeyfile = false
				resetUI()
				accessDenied("Keyfile read")
				giu.Update()
				return
			}
			if !duplicate && statErr == nil && !stat.IsDir() {
				tmp = append(tmp, i)
			}
		}
		keyfiles = tmp

		// Update the keyfile status
		if len(keyfiles) == 0 {
			keyfileLabel = "None selected"
		} else if len(keyfiles) == 1 {
			keyfileLabel = "Using 1 keyfile"
		} else {
			keyfileLabel = fmt.Sprintf("Using %d keyfiles", len(keyfiles))
		}

		modalId++
		giu.Update()
		return
	}

	scanning = true
	files, folders := 0, 0
	compressDone, compressTotal = 0, 0
	resetUI()

	// One item dropped
	if len(names) == 1 {
		stat, err := os.Stat(names[0])
		if err != nil {
			mainStatus = "Failed to stat dropped item"
			mainStatusColor = RED
			giu.Update()
			return
		}

		// A folder was dropped
		if stat.IsDir() {
			folders++
			mode = "encrypt"
			inputLabel = "1 folder"
			startLabel = "Zip and Encrypt"
			onlyFolders = append(onlyFolders, names[0])
			inputFile = filepath.Join(filepath.Dir(names[0]), "encrypted-"+strconv.Itoa(int(time.Now().Unix()))) + ".zip"
			outputFile = inputFile + ".pcv"
		} else { // A file was dropped
			files++
			requiredFreeSpace = stat.Size()

			// Is the file a part of a split volume?
			nums := []string{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}
			endsNum := false
			for _, i := range nums {
				if strings.HasSuffix(names[0], i) {
					endsNum = true
				}
			}
			isSplit := strings.Contains(names[0], ".pcv.") && endsNum

			// Decide if encrypting or decrypting
			if strings.HasSuffix(names[0], ".pcv") || isSplit {
				mode = "decrypt"
				inputLabel = "Volume for decryption"
				startLabel = "Decrypt"
				commentsLabel = "Comments (read-only):"
				commentsDisabled = true

				// Get the correct input and output filenames
				if isSplit {
					ind := strings.Index(names[0], ".pcv")
					names[0] = names[0][:ind+4]
					inputFile = names[0]
					outputFile = names[0][:ind]
					recombine = true

					// Find out the number of splitted chunks
					totalFiles := 0
					for {
						stat, err := os.Stat(fmt.Sprintf("%s.%d", inputFile, totalFiles))
						if err != nil {
							break
						}
						totalFiles++
						compressTotal += stat.Size()
					}
					requiredFreeSpace = compressTotal
				} else {
					outputFile = names[0][:len(names[0])-4]
				}

				// Open the input file in read-only mode
				var fin *os.File
				var err error
				if isSplit {
					fin, err = os.Open(names[0] + ".0")
				} else {
					fin, err = os.Open(names[0])
				}
				if err != nil {
					resetUI()
					accessDenied("Read")
					giu.Update()
					return
				}

				// Check if version can be read from header
				tmp := make([]byte, 15)
				if n, err := fin.Read(tmp); err != nil || n != 15 {
					fin.Close()
					mainStatus = "Failed to read 15 bytes from file"
					mainStatusColor = RED
					giu.Update()
					return
				}
				tmp, err = rsDecode(rs5, tmp)
				if valid, _ := regexp.Match(`^v\d\.\d{2}`, tmp); err != nil || !valid {
					// Volume has plausible deniability
					deniability = true
					mainStatus = "Can't read header, assuming volume is deniable"
					fin.Close()
					giu.Update()
				} else {
					// Read comments from file and check for corruption
					tmp = make([]byte, 15)
					if n, err := fin.Read(tmp); err != nil || n != 15 {
						fin.Close()
						mainStatus = "Failed to read 15 bytes from file"
						mainStatusColor = RED
						giu.Update()
						return
					}
					tmp, err = rsDecode(rs5, tmp)
					if err == nil {
						commentsLength, err := strconv.Atoi(string(tmp))
						if err != nil {
							comments = "Comment length is corrupted"
							giu.Update()
						} else {
							tmp = make([]byte, commentsLength*3)
							if n, err := fin.Read(tmp); err != nil || n != commentsLength*3 {
								fin.Close()
								mainStatus = "Failed to read comments from file"
								mainStatusColor = RED
								giu.Update()
								return
							}
							comments = ""
							for i := 0; i < commentsLength*3; i += 3 {
								t, err := rsDecode(rs1, tmp[i:i+3])
								if err != nil {
									comments = "Comments are corrupted"
									break
								}
								comments += string(t)
							}
							giu.Update()
						}
					} else {
						comments = "Comments are corrupted"
						giu.Update()
					}

					// Read flags from file and check for corruption
					flags := make([]byte, 15)
					if n, err := fin.Read(flags); err != nil || n != 15 {
						fin.Close()
						mainStatus = "Failed to read 15 bytes from file"
						mainStatusColor = RED
						giu.Update()
						return
					}
					if err := fin.Close(); err != nil {
						panic(err)
					}
					flags, err = rsDecode(rs5, flags)
					if err != nil {
						mainStatus = "The volume header is damaged"
						mainStatusColor = RED
						giu.Update()
						return
					}

					// Update UI and variables according to flags
					if flags[1] == 1 {
						keyfile = true
						keyfileLabel = "Keyfiles required"
					} else {
						keyfileLabel = "Not applicable"
					}
					if flags[2] == 1 {
						keyfileOrdered = true
					}
					giu.Update()
				}
			} else { // One file was dropped for encryption
				mode = "encrypt"
				inputLabel = "1 file"
				startLabel = "Encrypt"
				inputFile = names[0]
				outputFile = names[0] + ".pcv"
				giu.Update()
			}

			// Add the file
			onlyFiles = append(onlyFiles, names[0])
			inputFile = names[0]
			if !isSplit {
				compressTotal += stat.Size()
			}
			giu.Update()
		}
	} else { // There are multiple dropped items
		mode = "encrypt"
		startLabel = "Zip and Encrypt"

		// Go through each dropped item and add to corresponding slices
		for _, name := range names {
			stat, err := os.Stat(name)
			if err != nil {
				resetUI()
				mainStatus = "Failed to stat dropped items"
				mainStatusColor = RED
				giu.Update()
				return
			}
			if stat.IsDir() {
				folders++
				onlyFolders = append(onlyFolders, name)
			} else {
				files++
				onlyFiles = append(onlyFiles, name)
				allFiles = append(allFiles, name)

				compressTotal += stat.Size()
				requiredFreeSpace += stat.Size()
				inputLabel = fmt.Sprintf("Scanning files... (%s)", sizeify(compressTotal))
				giu.Update()
			}
		}

		// Update UI with the number of files and folders selected
		if folders == 0 {
			inputLabel = fmt.Sprintf("%d files", files)
		} else if files == 0 {
			inputLabel = fmt.Sprintf("%d folders", folders)
		} else {
			if files == 1 && folders > 1 {
				inputLabel = fmt.Sprintf("1 file and %d folders", folders)
			} else if folders == 1 && files > 1 {
				inputLabel = fmt.Sprintf("%d files and 1 folder", files)
			} else if folders == 1 && files == 1 {
				inputLabel = "1 file and 1 folder"
			} else {
				inputLabel = fmt.Sprintf("%d files and %d folders", files, folders)
			}
		}

		// Set the input and output paths
		inputFile = filepath.Join(filepath.Dir(names[0]), "encrypted-"+strconv.Itoa(int(time.Now().Unix()))) + ".zip"
		outputFile = inputFile + ".pcv"
		giu.Update()
	}

	// Recursively add all files in 'onlyFolders' to 'allFiles'
	go func() {
		oldInputLabel := inputLabel
		for _, name := range onlyFolders {
			if filepath.Walk(name, func(path string, _ os.FileInfo, err error) error {
				if err != nil {
					resetUI()
					mainStatus = "Failed to walk through dropped items"
					mainStatusColor = RED
					giu.Update()
					return err
				}
				stat, err := os.Stat(path)
				if err != nil {
					resetUI()
					mainStatus = "Failed to walk through dropped items"
					mainStatusColor = RED
					giu.Update()
					return err
				}
				// If 'path' is a valid file path, add to 'allFiles'
				if !stat.IsDir() {
					allFiles = append(allFiles, path)
					compressTotal += stat.Size()
					requiredFreeSpace += stat.Size()
					inputLabel = fmt.Sprintf("Scanning files... (%s)", sizeify(compressTotal))
					giu.Update()
				}
				return nil
			}) != nil {
				resetUI()
				mainStatus = "Failed to walk through dropped items"
				mainStatusColor = RED
				giu.Update()
				return
			}
		}
		inputLabel = fmt.Sprintf("%s (%s)", oldInputLabel, sizeify(compressTotal))
		scanning = false
		giu.Update()
	}()
}

func work() {
	popupStatus = "Starting..."
	mainStatus = "Working..."
	mainStatusColor = WHITE
	working = true
	padded := false
	giu.Update()

	// Cryptography values
	var salt []byte                    // Argon2 salt, 16 bytes
	var hkdfSalt []byte                // HKDF-SHA3 salt, 32 bytes
	var serpentIV []byte               // Serpent IV, 16 bytes
	var nonce []byte                   // 24-byte XChaCha20 nonce
	var keyHash []byte                 // SHA3-512 hash of encryption key
	var keyHashRef []byte              // Same as 'keyHash', but used for comparison
	var keyfileKey []byte              // The SHA3-256 hashes of keyfiles
	var keyfileHash = make([]byte, 32) // The SHA3-256 of 'keyfileKey'
	var keyfileHashRef []byte          // Same as 'keyfileHash', but used for comparison
	var authTag []byte                 // 64-byte authentication tag (BLAKE2b or HMAC-SHA3)

	var tempZipCipherW *chacha20.Cipher
	var tempZipCipherR *chacha20.Cipher
	var tempZipInUse bool = false
	func() { // enclose to keep out of parent scope
		key, nonce := make([]byte, 32), make([]byte, 12)
		if n, err := rand.Read(key); err != nil || n != 32 {
			panic(errors.New("fatal crypto/rand error"))
		}
		if n, err := rand.Read(nonce); err != nil || n != 12 {
			panic(errors.New("fatal crypto/rand error"))
		}
		if bytes.Equal(key, make([]byte, 32)) || bytes.Equal(nonce, make([]byte, 12)) {
			panic(errors.New("fatal crypto/rand error")) // this should never happen but be safe
		}
		var errW error
		var errR error
		tempZipCipherW, errW = chacha20.NewUnauthenticatedCipher(key, nonce)
		tempZipCipherR, errR = chacha20.NewUnauthenticatedCipher(key, nonce)
		if errW != nil || errR != nil {
			panic(errors.New("fatal chacha20 init error"))
		}
	}()

	// Combine/compress all files into a .zip file if needed
	if len(allFiles) > 1 || len(onlyFolders) > 0 {
		// Consider case where compressing only one file
		files := allFiles
		if len(allFiles) == 0 {
			files = onlyFiles
		}

		// Get the root directory of the selected files
		var rootDir string
		if len(onlyFolders) > 0 {
			rootDir = filepath.Dir(onlyFolders[0])
		} else {
			rootDir = filepath.Dir(onlyFiles[0])
		}

		// Open a temporary .zip for writing
		inputFile = strings.TrimSuffix(outputFile, ".pcv") + ".tmp"
		file, err := os.Create(inputFile)
		if err != nil { // Make sure file is writable
			accessDenied("Write")
			return
		}

		// Add each file to the .zip
		tempZip := encryptedZipWriter{
			_w:      file,
			_cipher: tempZipCipherW,
		}
		tempZipInUse = true
		writer := zip.NewWriter(&tempZip)
		compressStart = time.Now()
		for i, path := range files {
			progressInfo = fmt.Sprintf("%d/%d", i+1, len(files))
			giu.Update()

			// Create file info header (size, last modified, etc.)
			stat, err := os.Stat(path)
			if err != nil {
				writer.Close()
				file.Close()
				os.Remove(inputFile)
				resetUI()
				mainStatus = "Failed to stat input files"
				mainStatusColor = RED
				return
			}
			header, err := zip.FileInfoHeader(stat)
			if err != nil {
				writer.Close()
				file.Close()
				os.Remove(inputFile)
				resetUI()
				mainStatus = "Failed to create zip.FileInfoHeader"
				mainStatusColor = RED
				return
			}
			header.Name = strings.TrimPrefix(path, rootDir)
			header.Name = filepath.ToSlash(header.Name)
			header.Name = strings.TrimPrefix(header.Name, "/")

			if compress {
				header.Method = zip.Deflate
			} else {
				header.Method = zip.Store
			}

			// Open the file for reading
			entry, err := writer.CreateHeader(header)
			if err != nil {
				writer.Close()
				file.Close()
				os.Remove(inputFile)
				resetUI()
				mainStatus = "Failed to writer.CreateHeader"
				mainStatusColor = RED
				return
			}
			fin, err := os.Open(path)
			if err != nil {
				writer.Close()
				file.Close()
				os.Remove(inputFile)
				resetUI()
				accessDenied("Read")
				return
			}

			// Use a passthrough to catch compression progress
			passthrough := &compressorProgress{Reader: fin}
			buf := make([]byte, MiB)
			_, err = io.CopyBuffer(entry, passthrough, buf)
			fin.Close()

			if err != nil {
				writer.Close()
				insufficientSpace(nil, file)
				os.Remove(inputFile)
				return
			}

			if !working {
				writer.Close()
				cancel(nil, file)
				os.Remove(inputFile)
				return
			}
		}
		if err := writer.Close(); err != nil {
			panic(err)
		}
		if err := file.Close(); err != nil {
			panic(err)
		}
	}

	// Recombine a split file if necessary
	if recombine {
		totalFiles := 0
		totalBytes := int64(0)
		done := 0

		// Find out the number of splitted chunks
		for {
			stat, err := os.Stat(fmt.Sprintf("%s.%d", inputFile, totalFiles))
			if err != nil {
				break
			}
			totalFiles++
			totalBytes += stat.Size()
		}

		// Make sure not to overwrite anything
		_, err := os.Stat(outputFile + ".pcv")
		if err == nil { // File already exists
			mainStatus = "Please remove " + filepath.Base(outputFile+".pcv")
			mainStatusColor = RED
			return
		}

		// Create a .pcv to combine chunks into
		fout, err := os.Create(outputFile + ".pcv")
		if err != nil { // Make sure file is writable
			accessDenied("Write")
			return
		}

		// Merge all chunks into one file
		startTime := time.Now()
		for i := range totalFiles {
			fin, err := os.Open(fmt.Sprintf("%s.%d", inputFile, i))
			if err != nil {
				fout.Close()
				os.Remove(outputFile + ".pcv")
				resetUI()
				accessDenied("Read")
				return
			}

			for {
				if !working {
					cancel(fin, fout)
					os.Remove(outputFile + ".pcv")
					return
				}

				// Copy from the chunk into the .pcv
				data := make([]byte, MiB)
				read, err := fin.Read(data)
				if err != nil {
					break
				}
				data = data[:read]
				var n int
				n, err = fout.Write(data)
				done += read

				if err != nil || n != len(data) {
					insufficientSpace(fin, fout)
					os.Remove(outputFile + ".pcv")
					return
				}

				// Update the stats
				progress, speed, eta = statify(int64(done), totalBytes, startTime)
				progressInfo = fmt.Sprintf("%d/%d", i+1, totalFiles)
				popupStatus = fmt.Sprintf("Recombining at %.2f MiB/s (ETA: %s)", speed, eta)
				giu.Update()
			}
			if err := fin.Close(); err != nil {
				panic(err)
			}
		}
		if err := fout.Close(); err != nil {
			panic(err)
		}
		inputFileOld = inputFile
		inputFile = outputFile + ".pcv"
	}

	// Input volume has plausible deniability
	if mode == "decrypt" && deniability {
		popupStatus = "Removing deniability protection..."
		progressInfo = ""
		progress = 0
		canCancel = false
		giu.Update()

		// Get size of volume for showing progress
		stat, err := os.Stat(inputFile)
		if err != nil {
			// we already read from inputFile successfully in onDrop
			// so it is very unlikely this err != nil, we can just panic
			panic(err)
		}
		total := stat.Size()

		// Rename input volume to free up the filename
		fin, err := os.Open(inputFile)
		if err != nil {
			panic(err)
		}
		for strings.HasSuffix(inputFile, ".tmp") {
			inputFile = strings.TrimSuffix(inputFile, ".tmp")
		}
		inputFile += ".tmp"
		fout, err := os.Create(inputFile)
		if err != nil {
			panic(err)
		}

		// Get the Argon2 salt and XChaCha20 nonce from input volume
		salt := make([]byte, 16)
		nonce := make([]byte, 24)
		if n, err := fin.Read(salt); err != nil || n != 16 {
			panic(errors.New("failed to read 16 bytes from file"))
		}
		if n, err := fin.Read(nonce); err != nil || n != 24 {
			panic(errors.New("failed to read 24 bytes from file"))
		}

		// Generate key and XChaCha20
		key := argon2.IDKey([]byte(password), salt, 4, 1<<20, 4, 32)
		chacha, err := chacha20.NewUnauthenticatedCipher(key, nonce)
		if err != nil {
			panic(err)
		}

		// Decrypt the entire volume
		done, counter := 0, 0
		for {
			src := make([]byte, MiB)
			size, err := fin.Read(src)
			if err != nil {
				break
			}
			src = src[:size]
			dst := make([]byte, len(src))
			chacha.XORKeyStream(dst, src)
			if n, err := fout.Write(dst); err != nil || n != len(dst) {
				fout.Close()
				os.Remove(fout.Name())
				panic(errors.New("failed to write dst"))
			}

			// Update stats
			done += size
			counter += MiB
			progress = float32(float64(done) / float64(total))
			giu.Update()

			// Change nonce after 60 GiB to prevent overflow
			if counter >= 60*GiB {
				tmp := sha3.New256()
				if n, err := tmp.Write(nonce); err != nil || n != len(nonce) {
					panic(errors.New("failed to write nonce to tmp during rekeying"))
				}
				nonce = tmp.Sum(nil)[:24]
				chacha, err = chacha20.NewUnauthenticatedCipher(key, nonce)
				if err != nil {
					panic(err)
				}
				counter = 0
			}
		}

		if err := fin.Close(); err != nil {
			panic(err)
		}
		if err := fout.Close(); err != nil {
			panic(err)
		}

		// Check if the version can be read from the volume
		fin, err = os.Open(inputFile)
		if err != nil {
			panic(err)
		}
		tmp := make([]byte, 15)
		if n, err := fin.Read(tmp); err != nil || n != 15 {
			panic(errors.New("failed to read 15 bytes from file"))
		}
		if err := fin.Close(); err != nil {
			panic(err)
		}
		tmp, err = rsDecode(rs5, tmp)
		if valid, _ := regexp.Match(`^v1\.\d{2}`, tmp); err != nil || !valid {
			os.Remove(inputFile)
			inputFile = strings.TrimSuffix(inputFile, ".tmp")
			broken(nil, nil, "Password is incorrect or the file is not a volume", true)
			if recombine {
				inputFile = inputFileOld
			}
			return
		}
	}

	canCancel = false
	progress = 0
	progressInfo = ""
	giu.Update()

	// Subtract the header size from the total size if decrypting
	stat, err := os.Stat(inputFile)
	if err != nil {
		resetUI()
		accessDenied("Read")
		return
	}
	total := stat.Size()
	if mode == "decrypt" {
		total -= 789
	}

	// Open input file in read-only mode
	fin, err := os.Open(inputFile)
	if err != nil {
		resetUI()
		accessDenied("Read")
		return
	}

	// Setup output file
	var fout *os.File

	// If encrypting, generate values and write to file
	if mode == "encrypt" {
		popupStatus = "Generating values..."
		giu.Update()

		// Stores any errors when writing to file
		errs := make([]error, 11)

		// Make sure not to overwrite anything
		_, err = os.Stat(outputFile)
		if split && err == nil { // File already exists
			fin.Close()
			if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
				os.Remove(inputFile)
			}
			mainStatus = "Please remove " + filepath.Base(outputFile)
			mainStatusColor = RED
			return
		}

		// Create the output file
		fout, err = os.Create(outputFile + ".incomplete")
		if err != nil {
			fin.Close()
			if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
				os.Remove(inputFile)
			}
			accessDenied("Write")
			return
		}

		// Set up cryptographic values
		salt = make([]byte, 16)
		hkdfSalt = make([]byte, 32)
		serpentIV = make([]byte, 16)
		nonce = make([]byte, 24)

		// Write the program version to file
		_, errs[0] = fout.Write(rsEncode(rs5, []byte(version)))

		if len(comments) > 99999 {
			panic(errors.New("comments exceed maximum length"))
		}

		// Encode and write the comment length to file
		commentsLength := []byte(fmt.Sprintf("%05d", len(comments)))
		_, errs[1] = fout.Write(rsEncode(rs5, commentsLength))

		// Encode the comment and write to file
		for _, i := range []byte(comments) {
			_, err := fout.Write(rsEncode(rs1, []byte{i}))
			if err != nil {
				errs[2] = err
			}
		}

		// Configure flags and write to file
		flags := make([]byte, 5)
		if paranoid { // Paranoid mode selected
			flags[0] = 1
		}
		if len(keyfiles) > 0 { // Keyfiles are being used
			flags[1] = 1
		}
		if keyfileOrdered { // Order of keyfiles matter
			flags[2] = 1
		}
		if reedsolo { // Full Reed-Solomon encoding is selected
			flags[3] = 1
		}
		if total%int64(MiB) >= int64(MiB)-128 { // Reed-Solomon internals
			flags[4] = 1
		}
		_, errs[3] = fout.Write(rsEncode(rs5, flags))

		// Fill values with Go's CSPRNG
		if _, err := rand.Read(salt); err != nil {
			panic(err)
		}
		if _, err := rand.Read(hkdfSalt); err != nil {
			panic(err)
		}
		if _, err := rand.Read(serpentIV); err != nil {
			panic(err)
		}
		if _, err := rand.Read(nonce); err != nil {
			panic(err)
		}
		if bytes.Equal(salt, make([]byte, 16)) {
			panic(errors.New("fatal crypto/rand error"))
		}
		if bytes.Equal(hkdfSalt, make([]byte, 32)) {
			panic(errors.New("fatal crypto/rand error"))
		}
		if bytes.Equal(serpentIV, make([]byte, 16)) {
			panic(errors.New("fatal crypto/rand error"))
		}
		if bytes.Equal(nonce, make([]byte, 24)) {
			panic(errors.New("fatal crypto/rand error"))
		}

		// Encode values with Reed-Solomon and write to file
		_, errs[4] = fout.Write(rsEncode(rs16, salt))
		_, errs[5] = fout.Write(rsEncode(rs32, hkdfSalt))
		_, errs[6] = fout.Write(rsEncode(rs16, serpentIV))
		_, errs[7] = fout.Write(rsEncode(rs24, nonce))

		// Write placeholders for future use
		_, errs[8] = fout.Write(make([]byte, 192))  // Hash of encryption key
		_, errs[9] = fout.Write(make([]byte, 96))   // Hash of keyfile key
		_, errs[10] = fout.Write(make([]byte, 192)) // BLAKE2b/HMAC-SHA3 tag

		for _, err := range errs {
			if err != nil {
				insufficientSpace(fin, fout)
				if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
					os.Remove(inputFile)
				}
				os.Remove(fout.Name())
				return
			}
		}
	} else { // Decrypting, read values from file and decode
		popupStatus = "Reading values..."
		giu.Update()

		// Stores any Reed-Solomon decoding errors
		errs := make([]error, 10)

		version := make([]byte, 15)
		fin.Read(version)
		_, errs[0] = rsDecode(rs5, version)

		tmp := make([]byte, 15)
		fin.Read(tmp)
		tmp, errs[1] = rsDecode(rs5, tmp)

		if valid, err := regexp.Match(`^\d{5}$`, tmp); !valid || err != nil {
			broken(fin, nil, "Unable to read comments length", true)
			return
		}

		commentsLength, _ := strconv.Atoi(string(tmp))
		fin.Read(make([]byte, commentsLength*3))
		total -= int64(commentsLength) * 3

		flags := make([]byte, 15)
		fin.Read(flags)
		flags, errs[2] = rsDecode(rs5, flags)
		paranoid = flags[0] == 1
		reedsolo = flags[3] == 1
		padded = flags[4] == 1
		if deniability {
			keyfile = flags[1] == 1
			keyfileOrdered = flags[2] == 1
		}

		salt = make([]byte, 48)
		fin.Read(salt)
		salt, errs[3] = rsDecode(rs16, salt)

		hkdfSalt = make([]byte, 96)
		fin.Read(hkdfSalt)
		hkdfSalt, errs[4] = rsDecode(rs32, hkdfSalt)

		serpentIV = make([]byte, 48)
		fin.Read(serpentIV)
		serpentIV, errs[5] = rsDecode(rs16, serpentIV)

		nonce = make([]byte, 72)
		fin.Read(nonce)
		nonce, errs[6] = rsDecode(rs24, nonce)

		keyHashRef = make([]byte, 192)
		fin.Read(keyHashRef)
		keyHashRef, errs[7] = rsDecode(rs64, keyHashRef)

		keyfileHashRef = make([]byte, 96)
		fin.Read(keyfileHashRef)
		keyfileHashRef, errs[8] = rsDecode(rs32, keyfileHashRef)

		authTag = make([]byte, 192)
		fin.Read(authTag)
		authTag, errs[9] = rsDecode(rs64, authTag)

		// If there was an issue during decoding, the header is corrupted
		for _, err := range errs {
			if err != nil {
				if keep { // If the user chooses to force decrypt
					kept = true
				} else {
					broken(fin, nil, "The volume header is damaged", true)
					return
				}
			}
		}
	}

	popupStatus = "Deriving key..."
	giu.Update()

	// Derive encryption keys and subkeys
	var key []byte
	if paranoid {
		key = argon2.IDKey(
			[]byte(password),
			salt,
			8,     // 8 passes
			1<<20, // 1 GiB memory
			8,     // 8 threads
			32,    // 32-byte output key
		)
	} else {
		key = argon2.IDKey(
			[]byte(password),
			salt,
			4,
			1<<20,
			4,
			32,
		)
	}
	if bytes.Equal(key, make([]byte, 32)) {
		panic(errors.New("fatal crypto/argon2 error"))
	}

	// If keyfiles are being used
	if len(keyfiles) > 0 || keyfile {
		popupStatus = "Reading keyfiles..."
		giu.Update()

		var keyfileTotal int64
		for _, path := range keyfiles {
			stat, err := os.Stat(path)
			if err != nil {
				panic(err) // we already checked os.Stat in onDrop
			}
			keyfileTotal += stat.Size()
		}

		if keyfileOrdered { // If order matters, hash progressively
			var tmp = sha3.New256()
			var keyfileDone int

			// For each keyfile...
			for _, path := range keyfiles {
				fin, err := os.Open(path)
				if err != nil {
					panic(err)
				}
				for { // Read in chunks of 1 MiB
					data := make([]byte, MiB)
					size, err := fin.Read(data)
					if err != nil {
						break
					}
					data = data[:size]
					if _, err := tmp.Write(data); err != nil { // Hash the data
						panic(err)
					}

					// Update progress
					keyfileDone += size
					progress = float32(keyfileDone) / float32(keyfileTotal)
					giu.Update()
				}
				if err := fin.Close(); err != nil {
					panic(err)
				}
			}
			keyfileKey = tmp.Sum(nil) // Get the SHA3-256

			// Store a hash of 'keyfileKey' for comparison
			tmp = sha3.New256()
			if _, err := tmp.Write(keyfileKey); err != nil {
				panic(err)
			}
			keyfileHash = tmp.Sum(nil)
		} else { // If order doesn't matter, hash individually and combine
			var keyfileDone int

			// For each keyfile...
			for _, path := range keyfiles {
				fin, err := os.Open(path)
				if err != nil {
					panic(err)
				}
				tmp := sha3.New256()
				for { // Read in chunks of 1 MiB
					data := make([]byte, MiB)
					size, err := fin.Read(data)
					if err != nil {
						break
					}
					data = data[:size]
					if _, err := tmp.Write(data); err != nil { // Hash the data
						panic(err)
					}

					// Update progress
					keyfileDone += size
					progress = float32(keyfileDone) / float32(keyfileTotal)
					giu.Update()
				}
				if err := fin.Close(); err != nil {
					panic(err)
				}

				sum := tmp.Sum(nil) // Get the SHA3-256

				// XOR keyfile hash with 'keyfileKey'
				if keyfileKey == nil {
					keyfileKey = sum
				} else {
					for i, j := range sum {
						keyfileKey[i] ^= j
					}
				}
			}

			// Store a hash of 'keyfileKey' for comparison
			tmp := sha3.New256()
			if _, err := tmp.Write(keyfileKey); err != nil {
				panic(err)
			}
			keyfileHash = tmp.Sum(nil)
		}
	}

	popupStatus = "Calculating values..."
	giu.Update()

	// Hash the encryption key for comparison when decrypting
	tmp := sha3.New512()
	if _, err := tmp.Write(key); err != nil {
		panic(err)
	}
	keyHash = tmp.Sum(nil)

	// Validate the password and/or keyfiles
	if mode == "decrypt" {
		keyCorrect := subtle.ConstantTimeCompare(keyHash, keyHashRef) == 1
		keyfileCorrect := subtle.ConstantTimeCompare(keyfileHash, keyfileHashRef) == 1
		incorrect := !keyCorrect
		if keyfile || len(keyfiles) > 0 {
			incorrect = !keyCorrect || !keyfileCorrect
		}

		// If something is incorrect
		if incorrect {
			if keep {
				kept = true
			} else {
				if !keyCorrect {
					mainStatus = "The provided password is incorrect"
				} else {
					if keyfileOrdered {
						mainStatus = "Incorrect keyfiles or ordering"
					} else {
						mainStatus = "Incorrect keyfiles"
					}
					if deniability {
						fin.Close()
						os.Remove(inputFile)
						inputFile = strings.TrimSuffix(inputFile, ".tmp")
					}
				}
				broken(fin, nil, mainStatus, true)
				if recombine {
					inputFile = inputFileOld
				}
				return
			}
		}

		// Create the output file for decryption
		fout, err = os.Create(outputFile + ".incomplete")
		if err != nil {
			fin.Close()
			if recombine {
				os.Remove(inputFile)
			}
			accessDenied("Write")
			return
		}
	}

	if len(keyfiles) > 0 || keyfile {
		// Prevent an even number of duplicate keyfiles
		if bytes.Equal(keyfileKey, make([]byte, 32)) {
			mainStatus = "Duplicate keyfiles detected"
			mainStatusColor = RED
			fin.Close()
			if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
				os.Remove(inputFile)
			}
			fout.Close()
			os.Remove(fout.Name())
			return
		}

		// XOR the encryption key with the keyfile key
		tmp := key
		key = make([]byte, 32)
		for i := range key {
			key[i] = tmp[i] ^ keyfileKey[i]
		}
	}

	done, counter := 0, 0
	chacha, err := chacha20.NewUnauthenticatedCipher(key, nonce)
	if err != nil {
		panic(err)
	}

	// Use HKDF-SHA3 to generate a subkey for the MAC
	var mac hash.Hash
	subkey := make([]byte, 32)
	hkdf := hkdf.New(sha3.New256, key, hkdfSalt, nil)
	if n, err := hkdf.Read(subkey); err != nil || n != 32 {
		panic(errors.New("fatal hkdf.Read error"))
	}
	if paranoid {
		mac = hmac.New(sha3.New512, subkey) // HMAC-SHA3
	} else {
		mac, err = blake2b.New512(subkey) // Keyed BLAKE2b
		if err != nil {
			panic(err)
		}
	}

	// Generate another subkey for use as Serpent's key
	serpentKey := make([]byte, 32)
	if n, err := hkdf.Read(serpentKey); err != nil || n != 32 {
		panic(errors.New("fatal hkdf.Read error"))
	}
	s, err := serpent.NewCipher(serpentKey)
	if err != nil {
		panic(err)
	}
	serpent := cipher.NewCTR(s, serpentIV)

	// Start the main encryption process
	canCancel = true
	startTime := time.Now()
	tempZip := encryptedZipReader{
		_r:      fin,
		_cipher: tempZipCipherR,
	}
	for {
		if !working {
			cancel(fin, fout)
			if recombine || len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
				os.Remove(inputFile)
			}
			os.Remove(fout.Name())
			return
		}

		// Read in data from the file
		var src []byte
		if mode == "decrypt" && reedsolo {
			src = make([]byte, MiB/128*136)
		} else {
			src = make([]byte, MiB)
		}

		var size int
		if tempZipInUse {
			size, err = tempZip.Read(src)
		} else {
			size, err = fin.Read(src)
		}
		if err != nil {
			break
		}
		src = src[:size]
		dst := make([]byte, len(src))

		// Do the actual encryption
		if mode == "encrypt" {
			if paranoid {
				serpent.XORKeyStream(dst, src)
				copy(src, dst)
			}

			chacha.XORKeyStream(dst, src)
			if _, err := mac.Write(dst); err != nil {
				panic(err)
			}

			if reedsolo {
				copy(src, dst)
				dst = nil
				// If a full MiB is available
				if len(src) == MiB {
					// Encode every chunk
					for i := 0; i < MiB; i += 128 {
						dst = append(dst, rsEncode(rs128, src[i:i+128])...)
					}
				} else {
					// Encode the full chunks
					chunks := math.Floor(float64(len(src)) / 128)
					for i := 0; float64(i) < chunks; i++ {
						dst = append(dst, rsEncode(rs128, src[i*128:(i+1)*128])...)
					}

					// Pad and encode the final partial chunk
					dst = append(dst, rsEncode(rs128, pad(src[int(chunks*128):]))...)
				}
			}
		} else { // Decryption
			if reedsolo {
				copy(dst, src)
				src = nil
				// If a complete 1 MiB block is available
				if len(dst) == MiB/128*136 {
					// Decode every chunk
					for i := 0; i < MiB/128*136; i += 136 {
						tmp, err := rsDecode(rs128, dst[i:i+136])
						if err != nil {
							if keep {
								kept = true
							} else {
								broken(fin, fout, "The input file is irrecoverably damaged", false)
								return
							}
						}
						if i == MiB/128*136-136 && done+MiB/128*136 >= int(total) && padded {
							tmp = unpad(tmp)
						}
						src = append(src, tmp...)

						if !fastDecode && i%17408 == 0 {
							progress, speed, eta = statify(int64(done+i), total, startTime)
							progressInfo = fmt.Sprintf("%.2f%%", progress*100)
							popupStatus = fmt.Sprintf("Repairing at %.2f MiB/s (ETA: %s)", speed, eta)
							giu.Update()
						}
					}
				} else {
					// Decode the full chunks
					chunks := len(dst)/136 - 1
					for i := range chunks {
						tmp, err := rsDecode(rs128, dst[i*136:(i+1)*136])
						if err != nil {
							if keep {
								kept = true
							} else {
								broken(fin, fout, "The input file is irrecoverably damaged", false)
								return
							}
						}
						src = append(src, tmp...)

						if !fastDecode && i%128 == 0 {
							progress, speed, eta = statify(int64(done+i*136), total, startTime)
							progressInfo = fmt.Sprintf("%.2f%%", progress*100)
							popupStatus = fmt.Sprintf("Repairing at %.2f MiB/s (ETA: %s)", speed, eta)
							giu.Update()
						}
					}

					// Unpad and decode the final partial chunk
					tmp, err := rsDecode(rs128, dst[int(chunks)*136:])
					if err != nil {
						if keep {
							kept = true
						} else {
							broken(fin, fout, "The input file is irrecoverably damaged", false)
							return
						}
					}
					src = append(src, unpad(tmp)...)
				}
				dst = make([]byte, len(src))
			}

			if _, err := mac.Write(src); err != nil {
				panic(err)
			}
			chacha.XORKeyStream(dst, src)

			if paranoid {
				copy(src, dst)
				serpent.XORKeyStream(dst, src)
			}
		}

		// Write the data to output file
		_, err = fout.Write(dst)
		if err != nil {
			insufficientSpace(fin, fout)
			if recombine || len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
				os.Remove(inputFile)
			}
			os.Remove(fout.Name())
			return
		}

		// Update stats
		if mode == "decrypt" && reedsolo {
			done += MiB / 128 * 136
		} else {
			done += MiB
		}
		counter += MiB
		progress, speed, eta = statify(int64(done), total, startTime)
		progressInfo = fmt.Sprintf("%.2f%%", progress*100)
		if mode == "encrypt" {
			popupStatus = fmt.Sprintf("Encrypting at %.2f MiB/s (ETA: %s)", speed, eta)
		} else {
			if fastDecode {
				popupStatus = fmt.Sprintf("Decrypting at %.2f MiB/s (ETA: %s)", speed, eta)
			}
		}
		giu.Update()

		// Change nonce/IV after 60 GiB to prevent overflow
		if counter >= 60*GiB {
			// ChaCha20
			nonce = make([]byte, 24)
			if n, err := hkdf.Read(nonce); err != nil || n != 24 {
				panic(errors.New("fatal hkdf.Read error"))
			}
			chacha, err = chacha20.NewUnauthenticatedCipher(key, nonce)
			if err != nil {
				panic(err)
			}

			// Serpent
			serpentIV = make([]byte, 16)
			if n, err := hkdf.Read(serpentIV); err != nil || n != 16 {
				panic(errors.New("fatal hkdf.Read error"))
			}
			serpent = cipher.NewCTR(s, serpentIV)

			// Reset counter to 0
			counter = 0
		}
	}

	progress = 0
	progressInfo = ""
	giu.Update()

	if mode == "encrypt" {
		popupStatus = "Writing values..."
		giu.Update()

		// Seek back to header and write important values
		if _, err := fout.Seek(int64(309+len(comments)*3), 0); err != nil {
			panic(err)
		}
		if _, err := fout.Write(rsEncode(rs64, keyHash)); err != nil {
			panic(err)
		}
		if _, err := fout.Write(rsEncode(rs32, keyfileHash)); err != nil {
			panic(err)
		}
		if _, err := fout.Write(rsEncode(rs64, mac.Sum(nil))); err != nil {
			panic(err)
		}
	} else {
		popupStatus = "Comparing values..."
		giu.Update()

		// Validate the authenticity of decrypted data
		if subtle.ConstantTimeCompare(mac.Sum(nil), authTag) == 0 {
			// Decrypt again but this time rebuilding the input data
			if reedsolo && fastDecode {
				fastDecode = false
				fin.Close()
				fout.Close()
				work()
				return
			}

			if keep {
				kept = true
			} else {
				broken(fin, fout, "The input file is damaged or modified", false)
				return
			}
		}
	}

	if err := fin.Close(); err != nil {
		panic(err)
	}
	if err := fout.Close(); err != nil {
		panic(err)
	}

	if err := os.Rename(outputFile+".incomplete", outputFile); err != nil {
		panic(err)
	}

	// Add plausible deniability
	if mode == "encrypt" && deniability {
		popupStatus = "Adding plausible deniability..."
		canCancel = false
		giu.Update()

		// Get size of volume for showing progress
		stat, err := os.Stat(outputFile)
		if err != nil {
			panic(err)
		}
		total := stat.Size()

		// Rename the output volume to free up the filename
		os.Rename(outputFile, outputFile+".tmp")
		fin, err := os.Open(outputFile + ".tmp")
		if err != nil {
			panic(err)
		}
		fout, err := os.Create(outputFile + ".incomplete")
		if err != nil {
			panic(err)
		}

		// Use a random Argon2 salt and XChaCha20 nonce
		salt := make([]byte, 16)
		nonce := make([]byte, 24)
		if n, err := rand.Read(salt); err != nil || n != 16 {
			panic(errors.New("fatal crypto/rand error"))
		}
		if n, err := rand.Read(nonce); err != nil || n != 24 {
			panic(errors.New("fatal crypto/rand error"))
		}
		if bytes.Equal(salt, make([]byte, 16)) || bytes.Equal(nonce, make([]byte, 24)) {
			panic(errors.New("fatal crypto/rand error"))
		}
		if _, err := fout.Write(salt); err != nil {
			panic(err)
		}
		if _, err := fout.Write(nonce); err != nil {
			panic(err)
		}

		// Generate key and XChaCha20
		key := argon2.IDKey([]byte(password), salt, 4, 1<<20, 4, 32)
		if bytes.Equal(key, make([]byte, 32)) {
			panic(errors.New("fatal crypto/argon2 error"))
		}
		chacha, err := chacha20.NewUnauthenticatedCipher(key, nonce)
		if err != nil {
			panic(err)
		}

		// Encrypt the entire volume
		done, counter := 0, 0
		for {
			src := make([]byte, MiB)
			size, err := fin.Read(src)
			if err != nil {
				break
			}
			src = src[:size]
			dst := make([]byte, len(src))
			chacha.XORKeyStream(dst, src)
			if _, err := fout.Write(dst); err != nil {
				panic(err)
			}

			// Update stats
			done += size
			counter += MiB
			progress = float32(float64(done) / float64(total))
			giu.Update()

			// Change nonce after 60 GiB to prevent overflow
			if counter >= 60*GiB {
				tmp := sha3.New256()
				if _, err := tmp.Write(nonce); err != nil {
					panic(err)
				}
				nonce = tmp.Sum(nil)[:24]
				chacha, err = chacha20.NewUnauthenticatedCipher(key, nonce)
				if err != nil {
					panic(err)
				}
				counter = 0
			}
		}

		if err := fin.Close(); err != nil {
			panic(err)
		}
		if err := fout.Close(); err != nil {
			panic(err)
		}
		if err := os.Remove(fin.Name()); err != nil {
			panic(err)
		}
		if err := os.Rename(outputFile+".incomplete", outputFile); err != nil {
			panic(err)
		}
		canCancel = true
		giu.Update()
	}

	// Split the file into chunks
	if split {
		var splitted []string
		stat, err := os.Stat(outputFile)
		if err != nil {
			panic(err)
		}
		size := stat.Size()
		finishedFiles := 0
		finishedBytes := 0
		chunkSize, err := strconv.Atoi(splitSize)
		if err != nil {
			panic(err)
		}

		// Calculate chunk size
		if splitSelected == 0 {
			chunkSize *= KiB
		} else if splitSelected == 1 {
			chunkSize *= MiB
		} else if splitSelected == 2 {
			chunkSize *= GiB
		} else if splitSelected == 3 {
			chunkSize *= TiB
		} else {
			chunkSize = int(math.Ceil(float64(size) / float64(chunkSize)))
		}

		// Get the number of required chunks
		chunks := int(math.Ceil(float64(size) / float64(chunkSize)))
		progressInfo = fmt.Sprintf("%d/%d", finishedFiles+1, chunks)
		giu.Update()

		// Open the volume for reading
		fin, err := os.Open(outputFile)
		if err != nil {
			panic(err)
		}

		// Delete existing chunks to prevent mixed chunks
		names, err := filepath.Glob(outputFile + ".*")
		if err != nil {
			panic(err)
		}
		for _, i := range names {
			if err := os.Remove(i); err != nil {
				panic(err)
			}
		}

		// Start the splitting process
		startTime := time.Now()
		for i := range chunks {
			// Make the chunk
			fout, _ := os.Create(fmt.Sprintf("%s.%d.incomplete", outputFile, i))
			done := 0

			// Copy data into the chunk
			for {
				data := make([]byte, MiB)
				for done+len(data) > chunkSize {
					data = make([]byte, int(math.Ceil(float64(len(data))/2)))
				}

				read, err := fin.Read(data)
				if err != nil {
					break
				}
				if !working {
					cancel(fin, fout)
					if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
						os.Remove(inputFile)
					}
					os.Remove(outputFile)
					for _, j := range splitted { // Remove existing chunks
						os.Remove(j)
					}
					os.Remove(fmt.Sprintf("%s.%d", outputFile, i))
					return
				}

				data = data[:read]
				_, err = fout.Write(data)
				if err != nil {
					insufficientSpace(fin, fout)
					if len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
						os.Remove(inputFile)
					}
					os.Remove(outputFile)
					for _, j := range splitted { // Remove existing chunks
						os.Remove(j)
					}
					os.Remove(fmt.Sprintf("%s.%d", outputFile, i))
					return
				}
				done += read
				if done >= chunkSize {
					break
				}

				// Update stats
				finishedBytes += read
				progress, speed, eta = statify(int64(finishedBytes), int64(size), startTime)
				popupStatus = fmt.Sprintf("Splitting at %.2f MiB/s (ETA: %s)", speed, eta)
				giu.Update()
			}
			if err := fout.Close(); err != nil {
				panic(err)
			}

			// Update stats
			finishedFiles++
			if finishedFiles == chunks {
				finishedFiles--
			}
			splitted = append(splitted, fmt.Sprintf("%s.%d", outputFile, i))
			progressInfo = fmt.Sprintf("%d/%d", finishedFiles+1, chunks)
			giu.Update()
		}

		if err := fin.Close(); err != nil {
			panic(err)
		}
		if err := os.Remove(outputFile); err != nil {
			panic(err)
		}
		names, err = filepath.Glob(outputFile + ".*.incomplete")
		if err != nil {
			panic(err)
		}
		for _, i := range names {
			if err := os.Rename(i, strings.TrimSuffix(i, ".incomplete")); err != nil {
				panic(err)
			}
		}
	}

	canCancel = false
	progress = 0
	progressInfo = ""
	giu.Update()

	// Delete temporary files used during encryption and decryption
	if recombine || len(allFiles) > 1 || len(onlyFolders) > 0 || compress {
		if err := os.Remove(inputFile); err != nil {
			panic(err)
		}
		if deniability {
			os.Remove(strings.TrimSuffix(inputFile, ".tmp"))
		}
	}

	// Delete the input files if the user chooses
	if delete {
		popupStatus = "Deleting files..."
		giu.Update()

		if mode == "decrypt" {
			if recombine { // Remove each chunk of volume
				i := 0
				for {
					_, err := os.Stat(fmt.Sprintf("%s.%d", inputFileOld, i))
					if err != nil {
						break
					}
					if err := os.Remove(fmt.Sprintf("%s.%d", inputFileOld, i)); err != nil {
						panic(err)
					}
					i++
				}
			} else {
				if err := os.Remove(inputFile); err != nil {
					panic(err)
				}
				if deniability {
					if err := os.Remove(strings.TrimSuffix(inputFile, ".tmp")); err != nil {
						panic(err)
					}
				}
			}
		} else {
			for _, i := range onlyFiles {
				if err := os.Remove(i); err != nil {
					panic(err)
				}
			}
			for _, i := range onlyFolders {
				if err := os.RemoveAll(i); err != nil {
					panic(err)
				}
			}
		}
	}
	if mode == "decrypt" && deniability {
		os.Remove(inputFile)
	}

	if mode == "decrypt" && !kept && autoUnzip {
		showProgress = true
		popupStatus = "Unzipping..."
		giu.Update()

		if err := unpackArchive(outputFile); err != nil {
			mainStatus = "Auto unzipping failed!"
			mainStatusColor = RED
			giu.Update()
			return
		}

		if err := os.Remove(outputFile); err != nil {
			panic(err)
		}
	}

	// All done, reset the UI
	oldKept := kept
	resetUI()
	kept = oldKept

	// If the user chose to keep a corrupted/modified file, let them know
	if kept {
		mainStatus = "The input file was modified. Please be careful"
		mainStatusColor = YELLOW
	} else {
		mainStatus = "Completed"
		mainStatusColor = GREEN
	}
}

// If the OS denies reading or writing to a file
func accessDenied(s string) {
	mainStatus = s + " access denied by operating system"
	mainStatusColor = RED
}

// If there isn't enough disk space
func insufficientSpace(fin *os.File, fout *os.File) {
	fin.Close()
	fout.Close()
	mainStatus = "Insufficient disk space"
	mainStatusColor = RED
}

// If corruption is detected during decryption
func broken(fin *os.File, fout *os.File, message string, keepOutput bool) {
	fin.Close()
	fout.Close()
	mainStatus = message
	mainStatusColor = RED

	// Clean up files since decryption failed
	if recombine {
		os.Remove(inputFile)
	}
	if !keepOutput {
		os.Remove(outputFile)
	}
}

// Stop working if user hits "Cancel"
func cancel(fin *os.File, fout *os.File) {
	fin.Close()
	fout.Close()
	mainStatus = "Operation cancelled by user"
	mainStatusColor = WHITE
}

// Reset the UI to a clean state with nothing selected or checked
func resetUI() {
	imgui.ClearActiveID()
	mode = ""

	inputFile = ""
	inputFileOld = ""
	outputFile = ""
	onlyFiles = nil
	onlyFolders = nil
	allFiles = nil
	inputLabel = "Drop files and folders into this window"

	password = ""
	cpassword = ""
	passwordState = giu.InputTextFlagsPassword
	passwordStateLabel = "Show"

	passgenLength = 32
	passgenUpper = true
	passgenLower = true
	passgenNums = true
	passgenSymbols = true
	passgenCopy = true

	keyfile = false
	keyfiles = nil
	keyfileOrdered = false
	keyfileLabel = "None selected"

	comments = ""
	commentsLabel = "Comments:"
	commentsDisabled = false

	paranoid = false
	reedsolo = false
	deniability = false
	recursively = false
	split = false
	splitSize = ""
	splitSelected = 1
	recombine = false
	compress = false
	delete = false
	autoUnzip = false
	sameLevel = false
	keep = false
	kept = false

	startLabel = "Start"
	mainStatus = "Ready"
	mainStatusColor = WHITE
	popupStatus = ""
	requiredFreeSpace = 0

	progress = 0
	progressInfo = ""
	giu.Update()
}

// Reed-Solomon encoder
func rsEncode(rs *infectious.FEC, data []byte) []byte {
	res := make([]byte, rs.Total())
	rs.Encode(data, func(s infectious.Share) {
		res[s.Number] = s.Data[0]
	})
	return res
}

// Reed-Solomon decoder
func rsDecode(rs *infectious.FEC, data []byte) ([]byte, error) {
	// If fast decode, just return the first 128 bytes
	if rs.Total() == 136 && fastDecode {
		return data[:128], nil
	}

	tmp := make([]infectious.Share, rs.Total())
	for i := range rs.Total() {
		tmp[i].Number = i
		tmp[i].Data = append(tmp[i].Data, data[i])
	}
	res, err := rs.Decode(nil, tmp)

	// Force decode the data but return the error as well
	if err != nil {
		if rs.Total() == 136 {
			return data[:128], err
		}
		return data[:rs.Total()/3], err
	}

	// No issues, return the decoded data
	return res, nil
}

// PKCS#7 pad (for use with Reed-Solomon)
func pad(data []byte) []byte {
	padLen := 128 - len(data)%128
	padding := bytes.Repeat([]byte{byte(padLen)}, padLen)
	return append(data, padding...)
}

// PKCS#7 unpad
func unpad(data []byte) []byte {
	padLen := int(data[127])
	return data[:128-padLen]
}

// Generate a cryptographically secure password
func genPassword() string {
	chars := ""
	if passgenUpper {
		chars += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	}
	if passgenLower {
		chars += "abcdefghijklmnopqrstuvwxyz"
	}
	if passgenNums {
		chars += "1234567890"
	}
	if passgenSymbols {
		chars += "-=_+!@#$^&()?<>"
	}
	tmp := make([]byte, passgenLength)
	for i := range int(passgenLength) {
		j, _ := rand.Int(rand.Reader, big.NewInt(int64(len(chars))))
		tmp[i] = chars[j.Int64()]
	}
	if passgenCopy {
		giu.Context.GetPlatform().SetClipboard(string(tmp))
	}
	return string(tmp)
}

// Convert done, total, and starting time to progress, speed, and ETA
func statify(done int64, total int64, start time.Time) (float32, float64, string) {
	progress := float32(done) / float32(total)
	elapsed := float64(time.Since(start)) / float64(MiB) / 1000
	speed := float64(done) / elapsed / float64(MiB)
	eta := int(math.Floor(float64(total-done) / (speed * float64(MiB))))
	return float32(math.Min(float64(progress), 1)), speed, timeify(eta)
}

// Convert seconds to HH:MM:SS
func timeify(seconds int) string {
	hours := int(math.Floor(float64(seconds) / 3600))
	seconds %= 3600
	minutes := int(math.Floor(float64(seconds) / 60))
	seconds %= 60
	hours = int(math.Max(float64(hours), 0))
	minutes = int(math.Max(float64(minutes), 0))
	seconds = int(math.Max(float64(seconds), 0))
	return fmt.Sprintf("%02d:%02d:%02d", hours, minutes, seconds)
}

// Convert bytes to KiB, MiB, etc.
func sizeify(size int64) string {
	if size >= int64(TiB) {
		return fmt.Sprintf("%.2f TiB", float64(size)/float64(TiB))
	} else if size >= int64(GiB) {
		return fmt.Sprintf("%.2f GiB", float64(size)/float64(GiB))
	} else if size >= int64(MiB) {
		return fmt.Sprintf("%.2f MiB", float64(size)/float64(MiB))
	} else {
		return fmt.Sprintf("%.2f KiB", float64(size)/float64(KiB))
	}
}

func unpackArchive(zipPath string) error {
	reader, err := zip.OpenReader(zipPath)
	if err != nil {
		return err
	}
	defer reader.Close()

	var totalSize int64
	for _, f := range reader.File {
		totalSize += int64(f.UncompressedSize64)
	}

	var extractDir string
	if sameLevel {
		extractDir = filepath.Dir(zipPath)
	} else {
		extractDir = filepath.Join(filepath.Dir(zipPath), strings.TrimSuffix(filepath.Base(zipPath), ".zip"))
	}

	var done int64
	startTime := time.Now()

	for _, f := range reader.File {
		if strings.Contains(f.Name, "..") {
			return errors.New("potentially malicious zip item path")
		}
		outPath := filepath.Join(extractDir, f.Name)

		// Make directory if current entry is a folder
		if f.FileInfo().IsDir() {
			if err := os.MkdirAll(outPath, 0700); err != nil {
				return err
			}
		}
	}

	for i, f := range reader.File {
		if strings.Contains(f.Name, "..") {
			return errors.New("potentially malicious zip item path")
		}

		// Already handled above
		if f.FileInfo().IsDir() {
			continue
		}

		outPath := filepath.Join(extractDir, f.Name)

		// Otherwise create necessary parent directories
		if err := os.MkdirAll(filepath.Dir(outPath), 0700); err != nil {
			return err
		}

		// Open the file inside the archive
		fileInArchive, err := f.Open()
		if err != nil {
			return err
		}
		defer fileInArchive.Close()

		dstFile, err := os.Create(outPath)
		if err != nil {
			return err
		}

		// Read from zip in chunks to update progress
		buffer := make([]byte, MiB)
		for {
			n, readErr := fileInArchive.Read(buffer)
			if n > 0 {
				_, writeErr := dstFile.Write(buffer[:n])
				if writeErr != nil {
					dstFile.Close()
					os.Remove(dstFile.Name())
					return writeErr
				}

				done += int64(n)
				progress, speed, eta = statify(done, totalSize, startTime)
				progressInfo = fmt.Sprintf("%d/%d", i+1, len(reader.File))
				popupStatus = fmt.Sprintf("Unpacking at %.2f MiB/s (ETA: %s)", speed, eta)
				giu.Update()
			}
			if readErr != nil {
				if readErr == io.EOF {
					break
				}
				dstFile.Close()
				return readErr
			}
		}
		dstFile.Close()
	}

	return nil
}

func main() {
	if rsErr1 != nil || rsErr2 != nil || rsErr3 != nil || rsErr4 != nil || rsErr5 != nil || rsErr6 != nil || rsErr7 != nil {
		panic(errors.New("rs failed to init"))
	}
	// Create the main window
	window = giu.NewMasterWindow("Picocrypt "+version[1:], 318, 507, giu.MasterWindowFlagsNotResizable)

	// Start the dialog module
	dialog.Init()

	// Set callbacks
	window.SetDropCallback(onDrop)
	window.SetCloseCallback(func() bool {
		return !working && !showProgress
	})

	// Set universal DPI
	dpi = giu.Context.GetPlatform().GetContentScale()

	// Simulate dropping command line arguments
	flag.Parse()
	if flag.NArg() > 0 {
		onDrop(flag.Args())
	}

	// Start the UI
	window.Run(draw)
}
</file>

<file path="src/README.md">
# Running From Source
If you would like to run Picocrypt from source, or an executable isn't available for your platform, you've come to the right place. Running from source is very simple, and I've made it even easier with these straightforward instructions. Unlike VeraCrypt, which requires complex build procedures, SDKs, and assemblers, Picocrypt can easily be compiled from source with only a Go and C compiler. All you need is ten minutes and an Internet connection.

# 1. Prerequisites
**Linux:**
```bash
apt install -y gcc xorg-dev libgtk-3-dev libgl1-mesa-dev libglu1-mesa
```
**macOS:**
```bash
xcode-select --install
brew install glfw glew
```
**Windows:** A C compiler, ideally TDM-GCC or MinGW-w64

# 2. Install Go
If you don't have Go installed, download it from <a href="https://go.dev/dl/">here</a> or install it from your package manager (`apt install golang-go`). The latest version of Go is recommended, although you may fall back to Go 1.19 should any issues arise in the future.

# 3. Get the Source Files
Download the source files as a zip from the homepage or `git clone` this repository. Next, navigate to the `src/` directory, where you will find the source file (`Picocrypt.go`). You will need this file, along with `go.mod` and `go.sum`, to compile Picocrypt.

# 4. Build From Source
Finally, build Picocrypt from source:
- Windows: <code>go build -ldflags="-s -w -H=windowsgui -extldflags=-static" Picocrypt.go</code>
- macOS: <code>go build -ldflags="-s -w" Picocrypt.go</code>
- Linux: <code>go build -ldflags="-s -w" Picocrypt.go</code>

Note: Make sure to set `CGO_ENABLED=1` if it isn't already.

# 5. Done!
You should now see a compiled executable (`Picocrypt.exe`/`Picocrypt`) in your directory. You can run it by double-clicking or executing it in your terminal. That wasn't too hard, right? Enjoy!

Note: On Linux, if hardware OpenGL isn't available, you can set `LIBGL_ALWAYS_SOFTWARE=1` to force Mesa to use software rendering. This way, Picocrypt will be able to run regardless of driver support and can even run without a GPU at all. You may also need to set `NO_AT_BRIDGE=1` to disable the accessibility bus which is known to cause potential issues.
</file>

<file path=".gitignore">
# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum

TODO
</file>

<file path="Changelog.md">
# v1.49 (Released 08/03/2025)
<ul>
	<li>✓ Update macOS icon to fit better</li>
	<li>✓ Added support for Cyrillic characters (https://github.com/Picocrypt/giu/pull/1), thanks <a href="https://github.com/Retengart">@Retengart</a></li>
	<li>✓ upx Linux binary in addition to Windows, update upx version for Windows</li>
</ul>

# v1.48 (Released 04/18/2025)
<ul>
	<li>✓ Allow pressing 'Enter' key to press Start/Process button</li>
	<li>✓ Update "Encrypt" button to "Zip and Encrypt" if multiple files</li>
	<li>✓ Give user estimated required free disk space in status label</li>
	<li>✓ Encrypt previously unencrypted temporary zip files</li>
	<li>✓ Add `.incomplete` to filenames while work is in progress</li>
	<li>✓ Use `encrypted-*.zip.pcv` output name instead of `Encrypted.zip.pcv`</li>
	<li>✓ Use 0700 permissions when auto unzipping and creating folders</li>
	<li>✓ Handle many more errors in the code where they were ignored previously</li>
</ul>

# v1.47 (Released 02/19/2025)
<ul>
	<li>✓ No code changes, just build on newly released Go 1.24</li>
	<li>✓ Reintroduce the Windows installer made using Inno Setup</li>
</ul>

# v1.46 (Released 01/29/2025)
<ul>
	<li>✓ Added Picocrypt version to the window title</li>
	<li>✓ Added ability to automatically unzip archives upon decryption</li>
</ul>

# v1.45 (Released 12/05/2024)
<ul>
	<li>✓ Bumped GitHub Actions Ubuntu 22 -> 24 and macOS 14 -> 15</li>
</ul>

# v1.44 (Released 11/09/2024)
<ul>
	<li>✓ No changes, just updated dependencies</li>
</ul>

# v1.43 (Released 09/11/2024)
<ul>
	<li>✓ No changes, just updated dependencies</li>
</ul>

# v1.42 (Released 09/03/2024)
<ul>
	<li>✓ <strong>Security audit by Radically Open Security has concluded! No major security issues were found🥳</strong></li>
	<li>✓ Panic if crypto/rand.Read fails</li>
	<li>✓ Assume host machine is trusted, make notes in documentation accordingly</li>
	<li>✓ Handle edge cases regarding comments</li>
</ul>

# v1.41 (Released 08/30/2024)
<ul>
	<li>✓ Move all external packages to under Picocrypt organization</li>
</ul>

# v1.40 (Released 08/10/2024)
<ul>
	<li>✓ Allow "Open with Picocrypt" to work; you can drop files and folders onto the executable now!</li>
</ul>

# v1.39 (Released 08/07/2024)
<ul>
	<li>✓ Disable comments if deniability is enabled</li>
</ul>

# v1.38 (Released 08/03/2024)
<ul>
	<li>✓ Remove periods from the end of labels</li>
</ul>

# v1.35 - v1.37 (Released 07/08/2024)
<ul>
	<li>✓ Various small releases to get workflows running and automated builds released</li>
	<li>✓ Reduce keyfile generator's output size from 1 KiB -> 32 bytes since 32 bytes is enough</li>
</ul>

# v1.34 (Released 04/29/2024)
<ul>
	<li>✓ New CLI with support for files, folders, globs, paranoid mode, and Reed-Solomon</li>
	<li>✓ Migrate github.com/HACKERALERT/crypto back to golang.org/x/crypto</li>
	<li>✓ Distribute raw Linux binary instead of AppImage for better portability</li>
	<li>✓ Distribute macOS binaries for both Intel and Apple silicon</li>
</ul>

# v1.33 (Released 06/27/2023)
<ul>
	<li>✓ Add tooltip warning that comments are not encrypted (#164)</li>
	<li>✓ Hash keyfiles in chunks to reduce memory usage (#168)</li>
	<li>✓ Prevent using identical keyfiles under different filenames (#170)</li>
</ul>

# v1.32 (Released 04/28/2023)
<ul>
	<li>✓ Added a command-line interface</li>
	<li>✓ Use Debian 11 as the base for the AppImage instead of Debian 10</li>
	<li>✓ Include software rendering DLLs in the Paranoid Pack for future proofing</li>
	<li>✓ Add plausible deniability and recursive encryption</li>
	<li>✓ Added an installer for Windows (made using Inno Setup)</li>
</ul>

# v1.31 (Released 11/18/2022)
<ul>
	<li>✓ Force software OpenGL rendering on macOS</li>
	<li>✓ Use native clipboard APIs instead of external package (removes need for xclip)</li>
	<li>✓ Revert using system temporary folder due to size issues</li>
</ul>

# v1.30 (Released 09/24/2022)
<ul>
	<li>✓ Improve tooltip word choice</li>
	<li>✓ Add FAQ to README</li>
	<li>✓ Fix scaling issue when moving between monitors with different DPIs (on Windows)</li>
	<li>✓ Strip periods from custom output filename to prevent file extension problems</li>
	<li>✓ Minor tweaks to keyfile modal</li>
	<li>✓ Use temporary .zip file to prevent overwriting when encrypting</li>
	<li>✓ Check if files already exist when recombining and splitting to prevent overwriting</li>
	<li>✓ Show ".*" in the output box if splitting</li>
	<li>✓ Skip temporary and inaccessible files when combining/compressing</li>
	<li>✓ Improve file scanning performance by precomputing total size</li>
	<li>✓ Stability improvements and fixes for edge cases</li>
	<li>✓ Check for clipboard support on Linux</li>
</ul>

# v1.29 (Released 05/23/2022)
<ul>
	<li>✓ Review/improve Internals.md</li>
	<li>✓ Add option to compress when encrypting a single file</li>
	<li>✓ Check for errors when not enough disk space</li>
	<li>✓ Show MiB/GiB instead of M/G in the input label to prevent confusion</li>
	<li>✓ Minor consistency improvements</li>
</ul>

# v1.28 (Released 05/16/2022)
<ul>
	<li>✓ Fix bug when decrypting a splitted volume with a custom output name and "Delete files" selected</li>
	<li>✓ Improve responsiveness of cancel button (instant cancel when pressed instead of delays)</li>
	<li>✓ Software OpenGL rendering on Windows (for Windows on ARM compatibility and older hardware)</li>
	<li>✓ Progress, speed, and ETA for combining/compressing files, recombining files, and splitting files</li>
	<li>✓ Improve overall IO performance</li>
	<li>✓ Much smoother Reed-Solomon decryption flow, slightly better performance</li>
	<li>✓ Major code cleanups and organizing</li>
	<li>✓ <i>Much better</i> file permission handling</li>
	<li>✓ Numerous minor fixes and improvements</li>
	<li>✓ Improve Reed-Solomon performance (only rebuild data if corruption is detected)</li>
	<li>✓ `gofmt` and `go mod tidy` all dependencies</li>
	<li>✓ Fix bad pointer issue when running with `-race`</li>
	<li>✓ Fix focus bug where input boxes are not cleared if they are focused when file is dropped</li>
	<li>✓ Fix bug on Windows where copying from the password field using Ctrl+C and then pasting with the "Paste" button would cause a crash</li>
	<li>✓ Make sure at least one password characters category is checked when generating</li>
	<li>✓ Use `desktop-file-validate` to find and remove deprecated fields and fix invalid ones in the .desktop for .deb and AppImage</li>
	<li>✓ .deb and AppImage optimizations, reliability improvements</li>
	<li>✓ Snapcraft uses software OpenGL rendering as well now</li>
	<li>✓ Statically linked libc6, etc. for best cross-platform compatibility for Snapcraft</li>
	<li>✓ Added NO_AT_BRIDGE=1 to Snapcraft to fix an issue on Arch Linux (#75)</li>
	<li>✓ Clean up unnecessary files in dependencies</li>
	<li>✓ Sign executables with OpenPGP</li>
</ul>

# v1.27 (Released 05/02/2022)
<ul>
	<li>✓ Input validation for split size</li>
	<li>✓ Ability to split into a custom number of total chunks in addition to by size</li>
	<li>✓ Fix issue with long comments</li>
	<li>✓ Deprecate Snapcraft and provide a .deb and AppImage instead</li>
</ul>

# v1.26 (Released 04/18/2022)
<ul>
	<li>✓ Fix a race condition</li>
	<li>✓ Fix invalid pointer crash when decrypting files >256GB</li>
	<li>✓ UI improvements and tweaks</li>
	<li>✓ Fix crash on Windows when saving to the root directory of a drive</li>
	<li>✓ Max file size limit removed! Picocrypt can now encrypt files of unlimited size instead of being capped at 256 GiB</li>
	<li>✓ Shows total input size along with input label</li>
	<li>✓ Update to GLFW 3.3.6 for better stability</li>
</ul>

# v1.25 (Released 04/13/2022)
<ul>
	<li>✓ Improve Internals documentation (header format, etc.)</li>
	<li>✓ Save as and keyfile file dialog now opens in the same directory as dropped files</li>
	<li>✓ Improvements for long file names</li>
	<li>✓ Minor UI improvements and fixes</li>
</ul>

# v1.24 (Released 04/02/2022)
<ul>
	<li>✓ Fixed layout bug that allowed scrolling within window</li>
	<li>✓ Optimize dependencies</li>
	<li>✓ Numerous code and UI optimizations, including better comments</li>
	<li>✓ Keyfile modal will recenter automatically upon dropping a keyfile</li>
	<li>✓ Fix modals moving around randomly when open and closed numerous times</li>
	<li>✓ Fixed: Progressbar modal moves around weirdly sometimes</li>
	<li>✓ Better error handling</li>
	<li>✓ Show compression speed and percentage</li>
	<li>✓ Smoothen splitting file and recombing file progress bars</li>
	<li>✓ Finish adding tooltips</li>
</ul>

# v1.23 (Released 03/19/2022)
<ul>
	<li>✓ Removed the checksum generator to get back on track with original Picocrypt ideology</li>
	<li>✓ Cleaned up and optimized code</li>
	<li>✓ Compiled with MinGW GCC11 instead of TDM-GCC, Go 1.18 instead of Go 1.17</li>
	<li>✓ Picocrypt no longer checks for new versions, so no network requests are ever made</li>
</ul>

# v1.22 (Released 12/22/2021)
<ul>
	<li>✓ Remove fast mode, as a change for the normal mode will make fast mode obselete</li>
	<li>✓ For normal mode, change HMAC-SHA3 to a keyed Blake2b</li>
</ul>

# v1.21 (Released 11/19/2021)
<ul>
	<li>✓ Remove file shredder because it won't be very effective in the future</li>
	<li>✓ Fix minor temporary file bug</li>
	<li>✓ Improve decryption UI</li>
</ul>

# v1.20 (Released 11/12/2021)
<ul>
	<li>✓ Fix keyfile modal UI layout</li>
	<li>✓ Fix keyfile modal typo</li>
	<li>✓ Fix minor keyfile bug</li>
	<li>✓ Improve shredding window layout</li>
	<li>✓ Fork all dependencies and recursive dependencies into "offline" repos for hardening and better stability</li>
	<li>✓ Fix UI scaling issues</li>
	<li>✓ Fix high DPI layout issues</li>
	<li>✓ Optimize zip compressor</li>
</ul>

# v1.19 (Released 09/26/2021)
<ul>
	<li>✓ UI scaling hotfix</li>
</ul>

# v1.18 (Released 09/24/2021)
<ul>
	<li>✓ Make UI more consistent (minor DPI issues)</li>
	<li>✓ Fix crashing when OS denies permission to access file</li>
	<li>✓ Fixed bug where file object was not closed properly</li>
	<li>✓ Encryption/decryption file naming and extension bugs</li>
	<li>✓ Many fixes, optimizations, and linting</li>
</ul>

# v1.17 (Released 09/04/2021)
<ul>
	<li>✓ (abandoned due to UI issues with ASCII codes >128) Extended ASCII set in password generator</li>
	<li>✓ Tooltips for all advanced options</li>
	<li>✓ Localization support (use system default where possible)</li>
	<li>✓ Auto detect system locale, fallback to English</li>
	<li>✓ Fix ETA negative number bug</li>
	<li>✓ Add clear button to password field</li>
	<li>✓ Multiple keyfiles support and DND</li>
	<li>✓ Option to require specific keyfile order</li>
	<li>✓ Keyfile generator</li>
	<li>✓ Bug: Red error label shown in main window during successful decryption after selecting incorrect keyfiles</li>
	<li>✓ Prevent duplicate keyfile</li>
	<li>✓ Add a select keyfile button</li>
	<li>✓ Make sure only one of "Fast mode" and "Paranoid mode" can be enabled</li>
	<li>✓ Fix bug where metadata says "read-only", but the textbox is modifiable</li>
	<li>✓ Add option to delete encrypted files after decryption</li>
</ul>
<strong>Note: v1.17 will be incompatible with all previous releases!</strong>

# v1.16 (Released 08/11/2021)
<ul>
	<li>✓ Fixed bug when entering a wrong password when decrypting a splitted file</li>
	<li>✓ Fixed bug where an existing file is delete when a wrong password is used</li>
	<li>✓ The password generator is now customizable</li>
	<li>✓ Make keyfile support more reliable (keyfile now out of Beta)</li>
	<li>✓ Fix keyfile user flow issue</li>
	<li>✓ Bug fixes</li>
	<li>✓ UI fixes improvements</li>
</ul>

# v1.15 (Released 08/09/2021)
<ul>
	<li>✓ Add cancel button to file shredder and custom number of passes</li>
	<li>✓ Password generator</li>
	<li>✓ Make password strength circle start at top</li>
	<li>✓ Fix shredder UI bugs</li>
</ul>

# v1.14 (Released 08/07/2021)
<ul>
	<li>✓ Low-severity security fix for the recently discovered partitioning oracle attacks</li>
	<li>✓ Move from Monocypher to Go's standard supplemental ChaCha20 in favour of the latter being stateful</li>
	<li>✓ Add SHA3 (normal mode) and BLAKE2b (fast mode) as HMAC to replace Poly1305 and prevent partitioning oracle attacks</li>
	<li>✓ Removed ~100 lines of unnecessary code now that Picocrypt uses Go's ChaCha20 (cleaner and stabler code)</li>
	<li>✓ Added window icons</li>
	<li>✓ Switch to a new Reed-Solomon encoder that automatically corrects errors</li>
	<li>✓ Add a "Paranoid mode", which will use the Serpent cipher in addition to XChaCha20</li>
	<li>✓ Cleaner code with plenty of comments for people taking a look</li>
	<li>✓ Metadata is now Reed-Solomon encoded (everything bit of header data is now RS-encoded for redundancy)</li>
	<li>✓ Reed-Solomon checkbox is now enabled and Reed-Solomon works</li>
	<li>✓ Implemented Dropbox's zxcvbn password strength checker</li>
	<li>✓ Removed paranoid shredding as it is too hard to implement correctly and not cross platform</li>
	<li>✓ Fixed Windows zip extract error notice that doesn't appear in 7-Zip (edit: it was a backslash issue)</li>
	<li>✓ Optional shred temporary files checkbox</li>
	<li>✓ Remove BLAKE3 from the checksum generator tab, as it has no practical use and requires a non-standard library</li>
	<li>✓ Advanced options are shown dynamically depending on whether encrypting or decrypting</li>
	<li>✓ Window closing disabled during encryption/decryption/shredding to prevent leakage of temporary files</li>
	<li>✓ Reduce padding of metadataLength from 10 to 5 (you probably won't type more than 99999 metadata characters)</li>
	<li>✓ Use regex to check if an input file is a valid Picocrypt volume or not during decryption</li>
	<li>✓ Improved user flow as well as fix UI bugs</li>
	<li>✓ Code optimizations</li>
	<li>✓ Many bug fixes/stability improvments</li>
</ul>
<strong>Note: v1.14 will be incompatible with all previous releases!</strong>

# v1.13 (Released 5/29/2021)
<ul>
	<li>✓ Picocrypt has been ported from Python to Go, thus completely rewritten</li>
	<li>✓ Added fast mode, which can achieve ~250MB/s</li>
	<li>✓ Added file shredder and file checksum generator</li>
	<li>✓ Automatically checks for newer versions</li>
	<li>✓ Added file chunking support</li>
</ul>
<strong>Note: v1.13 will be incompatible with all previous releases!</strong>

# v1.12.1 (Released 04/11/2021)
<ul>
	<li>✓ Fixed a bug that caused "Secure wipe" feature to show "Unknown error" when done</li>
</ul>

# v1.12 (Released 04/07/2021)
<ul>
	<li>✓ Beautiful UI</li>
	<li>✓ More than x2 as fast as previous versions</li>
	<li>✓ Add cancel button to cancel encryption/decryption</li>
	<li>✓ (Bug) Delete existing file only if password is correct</li>
	<li>✓ Minor aesthetic fixes</li>
	<li>✓ Complete rewrite from scratch, to ensure reliability and security</li>
	<li>✓ Better anti-corruption (re-defined header format)</li>
	<li>✓ Switch to Argon2d instead Argon2id for better security</li>
	<li>✓ Switch from SHA3 to BLAKE3 for corruption check</li>
	<li>✓ Better user flow</li>
</ul>
<strong>Note: v1.12 will be incompatible with all previous releases!</strong>

# v1.11 (Released 03/23/2021)
<ul>
	<li>✓ Much more secure wipe via <code>sdelete64</code> for Windows, <code>shred</code> for Linux, and <code>rm -P</code> for MacOS</li>
	<li>✓ Much more beautiful UI for macOS</li>
	<li>✓ Robust secure wipe support for drag and dropped files/folders</li>
	<li>✓ Only open input files in read mode, since write mode is unnecessary</li>
	<li>✓ Clean up source code, add better comments</li>
	<li>✓ Drag and drop support (multiple files, a folder, a file and a folder, etc.)</li>
</ul>
</file>

<file path="CODEOWNERS">
.github/workflows/* @HACKERALERT
VERSION @HACKERALERT
CODEOWNERS @HACKERALERT
src/* @HACKERALERT
</file>

<file path="Internals.md">
# Internals
If you're wondering about how Picocrypt handles cryptography, you've come to the right place! This page contains the technical details about the cryptographic algorithms and parameters used, as well as how cryptographic values are stored in the header format.

# Core Cryptography
Picocrypt uses the following cryptographic primitives:
- XChaCha20 (cascaded with Serpent in counter mode for paranoid mode)
- Keyed-BLAKE2b for normal mode, HMAC-SHA3 for paranoid mode (256-bit key, 512-bit digest)
- HKDF-SHA3 for deriving a subkey for the MAC above, as well as a key for Serpent
- Argon2id:
    - Normal mode: 4 passes, 1 GiB memory, 4 threads
    - Paranoid mode: 8 passes, 1 GiB memory, 8 threads

All primitives used are from the well-known [golang.org/x/crypto](https://pkg.go.dev/golang.org/x/crypto) module.

# Counter Overflow
Since XChaCha20 has a max message size of 256 GiB, Picocrypt will use the HKDF-SHA3 mentioned above to generate a new nonce for XChaCha20 and a new IV for Serpent if the total encrypted data is more than 60 GiB. While this threshold can be increased up to 256 GiB, Picocrypt uses 60 GiB to prevent any edge cases with blocks or the counter used by Serpent.

# Header Format
A Picocrypt volume's header is encoded with Reed-Solomon by default since it is, after all, the most important part of the entire file. An encoded value will take up three times the size of the unencoded value.

**All offsets and sizes below are in bytes.**
| Offset | Encoded size | Decoded size | Description
| ------ | ------------ | ------------ | -----------
| 0      | 15           | 5            | Version number (ex. "v1.15")
| 15     | 15           | 5            | Length of comments, zero-padded to 5 bytes
| 30     | 3C           | C            | Comments with a length of C characters
| 30+3C  | 15           | 5            | Flags (paranoid mode, use keyfiles, etc.)
| 45+3C  | 48           | 16           | Salt for Argon2
| 93+3C  | 96           | 32           | Salt for HKDF-SHA3
| 189+3C | 48           | 16           | IV for Serpent
| 237+3C | 72           | 24           | Nonce for XChaCha20
| 309+3C | 192          | 64           | SHA3-512 of encryption key
| 501+3C | 96           | 32           | SHA3-256 of keyfile key
| 597+3C | 192          | 64           | Authentication tag (BLAKE2b/HMAC-SHA3)
| 789+3C |              |              | Encrypted contents of input data

# Keyfile Design
Picocrypt allows the use of keyfiles as an additional form of authentication. Picocrypt's unique "Require correct order" feature enforces the user to drop keyfiles into the window in the same order as they did when encrypting in order to decrypt the volume successfully. Here's how it works:

If correct order is not required, Picocrypt will take the SHA3-256 of each keyfile individually and XOR the hashes together. Finally, the result is XORed with the master key. Because the XOR operation is both commutative and associative, the order in which the keyfile hashes are XORed with each other doesn't matter - the end result is the same.

If correct order is required, Picocrypt will concatenate the keyfiles together in the order they were dropped into the window and take the SHA3-256 of the combined keyfiles. If the order is not correct, the keyfiles, when appended to each other, will result in a different file, and thus a different hash. So, the correct order of keyfiles is required to decrypt the volume successfully.

# Reed-Solomon
By default, all Picocrypt volume headers are encoded with Reed-Solomon to improve resiliency against bit rot. The header uses N+2N encoding, where N is the size of a particular header field such as the version number, and 2N is the number of parity bytes added. Using the Berlekamp-Welch algorithm, Picocrypt is able to automatically detect and correct up to 2N/2=N broken bytes.

If Reed-Solomon is to be used with the input data itself, the data will be encoded using 128+8 encoding, with the data being read in 1 MiB chunks and encoded in 128-byte blocks, and the final block padded to 128 bytes using PKCS#7.

To address the edge case where the final 128-byte block happens to be padded so that it completes a full 1 MiB chunk, a flag is used to distinguish whether the last 128-byte block was padded originally or if it is just a full 128-byte block of data.

# Deniability
Plausible deniability in Picocrypt is achieved by simply re-encrypting the volume but without storing any identifiable header data. A new Argon2 salt and XChaCha20 nonce will be generated and stored in the deniable volume, but since both values are random, they don't reveal anything. A deniable volume will look something like this:
```
[argon2 salt][xchacha20 nonce][encrypted stream of bytes]
```

# Just Read the Code
Picocrypt is a very simple tool and only has one source file. The source Go file is just 2K lines and a lot of the code is dealing with the UI. The core cryptography code is only about 1K lines of code, and even so, a lot of that code deals with the UI and other features of Picocrypt. So if you need more information about how Picocrypt works, just read the code. It's not long, and it is well commented and will explain what happens under the hood better than a document can.
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="README.md">
🍁 **Proudly made in Canada.** 🍁

<a href="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-windows.yml"><img src="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-windows.yml/badge.svg"></a>
<a href="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-macos.yml"><img src="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-macos.yml/badge.svg"></a>
<a href="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-linux.yml"><img src="https://github.com/Picocrypt/Picocrypt/actions/workflows/build-linux.yml/badge.svg"></a>
<a href="https://github.com/Picocrypt/Picocrypt/actions/workflows/codeql-analysis.yml"><img src="https://github.com/Picocrypt/Picocrypt/actions/workflows/codeql-analysis.yml/badge.svg"></a>

<p align="center"><img align="center" src="/images/logo.svg" width="512" alt="Picocrypt"></p> 

Picocrypt is a very small (hence <i>Pico</i>), very simple, yet very secure encryption tool that you can use to protect your files. It's designed to be the <i>go-to</i> tool for file encryption, with a focus on security, simplicity, and reliability. Picocrypt uses the secure XChaCha20 cipher and the Argon2id key derivation function to provide a high level of security.

<br>
<p align="center"><img align="center" src="/images/screenshot.png" width="318" alt="Picocrypt"></p>

# ❄️ Project archived ❄️

Picocrypt has been permanently archived and frozen into a read-only state.

Read the [reason](https://github.com/Picocrypt/Picocrypt/issues/134) why. ***Please read it carefully and fully**; it's not the format you might expect.*

**Picocrypt is still fully functional, stable, and secure as is. You can continue using it confidently.**

Archiving Picocrypt doesn't mean there's anything wrong with it, just that I'm done working on it.

A community-developed successor to Picocrypt is available and called [Picocrypt NG](https://github.com/Picocrypt-NG).

**I do not endorse, develop, nor support Picocrypt NG; use it at your own risk.**

# Downloads

ℹ️ **You are highly recommended to read through the [Features](https://github.com/Picocrypt/Picocrypt?tab=readme-ov-file#features) section below to fully understand the features and limitations of Picocrypt before using it.** ℹ️

Make sure to only download Picocrypt from this repository to ensure that you get the authentic and backdoor-free Picocrypt. When sharing Picocrypt with others, be sure to link to this repository to prevent any confusion. Besides this repository, there is no official website/webpage or mobile apps for Picocrypt. For example, beware of picocrypt.org ([archive.org snapshot](https://web.archive.org/web/20240816235513/http://picocrypt.org/)), which claimed to be the official website for this project.

## Windows
To download the latest, standalone, and portable executable for Windows, click <a href="https://github.com/Picocrypt/Picocrypt/releases/latest/download/Picocrypt.exe">here</a>. If it won't start, see <a href="https://github.com/Picocrypt/Picocrypt/issues/91">here</a> for a solution or use the installer below which automatically fixes the issue (recommended).

If you use Picocrypt frequently, you can also download the [installer](https://github.com/Picocrypt/Picocrypt/releases/download/1.49/Installer.exe) for easy access, automatic file extension association, and bundled compatibility helpers. Administrator privileges are not required to run the installer.

If your antivirus flags Picocrypt as a virus, please report it as a false positive to help everyone.

## macOS
Download Picocrypt <a href="https://github.com/Picocrypt/Picocrypt/releases/latest/download/Picocrypt.dmg">here</a>, open the container, and drag Picocrypt to your Applications. You will need to manually trust the app from a terminal if macOS prevents you from opening it:
```
xattr -d com.apple.quarantine /Applications/Picocrypt.app
```

Note: the macOS app is built for Apple silicon only. If you're still on Intel, you can build from source.

**Warning: Picocrypt will cease to work on macOS in the future** because Apple doesn't care about backwards compatibility. Once OpenGL is removed and/or GLFW compatibility is broken, Picocrypt will no longer work and it will be very difficult to fix. If you're a macOS user, you're probably better off using the CLI or Web version instead. Maybe also consider using an OS that actually somewhat cares about its developers and users...

## Linux
Download the raw binary <a href="https://github.com/Picocrypt/Picocrypt/releases/latest/download/Picocrypt">here</a> (you may need the packages below). Alternatively, try the <a href="https://github.com/Picocrypt/Picocrypt/releases/latest/download/Picocrypt.deb">.deb</a> or <a href="https://flathub.org/apps/io.github.picocrypt.Picocrypt">Flatpak</a>.
```
sudo apt install -y libc6 libgcc-s1 libgl1 libgtk-3-0 libstdc++6 libx11-6
```

## CLI
A command-line interface is available for Picocrypt <a href="https://github.com/Picocrypt/CLI">here</a>. It can encrypt and decrypt files, folders, and glob patterns, and supports paranoid mode and Reed-Solomon encoding. You can use it on systems that don't have a GUI or can't run the GUI app.

## Web
A functionally limited web app is available <a href="https://picocrypt.github.io/">here</a> which allows you to encrypt and decrypt standard Picocrypt volumes (no advanced features or keyfiles) on any modern browser, including mobile devices. It's a simple, future-proof way to securely encrypt files that should work indefinitely due to the web's stable nature. Note that you can only encrypt/decrypt single files up to a maximum size of 512 MiB.

# Comparison
Here's how Picocrypt compares to other popular encryption tools.

|                | Picocrypt      | VeraCrypt      | 7-Zip GUI      | BitLocker      | Cryptomator    |
| -------------- | -------------- | -------------- | -------------- | -------------- | -------------- |
| Free           |✅ Yes         |✅ Yes          |✅ Yes         |✅ Bundled      |✅ Yes         |
| Open Source    |✅ GPLv3       |✅ Multi        |✅ LGPL        |❌ No           |✅ GPLv3       |
| Cross-Platform |✅ Yes         |✅ Yes          |❌ No          |❌ No           |✅ Yes         |
| Size           |✅ 3 MiB       |❌ 20 MiB       |✅ 2 MiB       |✅ N/A          |❌ 50 MiB      |
| Portable       |✅ Yes         |✅ Yes          |❌ No          |✅ Yes          |❌ No          |
| Permissions    |✅ None        |❌ Admin        |❌ Admin       |❌ Admin        |❌ Admin       |
| Ease-Of-Use    |✅ Easy        |❌ Hard         |✅ Easy        |✅ Easy         |🟧 Medium      |
| Cipher         |✅ XChaCha20   |✅ AES-256      |✅ AES-256     |🟧 AES-128      |✅ AES-256     |
| Key Derivation |✅ Argon2      |🟧 PBKDF2       |❌ SHA-256     |❓ Unknown      |✅ Scrypt      |
| Data Integrity |✅ Always      |❌ No           |❌ No          |❓ Unknown      |✅ Always      |
| Deniability    |✅ Supported   |✅ Supported    |❌ No          |❌ No           |❌ No          |
| Reed-Solomon   |✅ Yes         |❌ No           |❌ No          |❌ No           |❌ No          |
| Compression    |✅ Yes         |❌ No           |✅ Yes         |✅ Yes          |❌ No          |
| Telemetry      |✅ None        |✅ None         |✅ None        |❓ Unknown      |✅ None        |
| Audited        |✅ [Yes](https://github.com/Picocrypt/storage/blob/main/Picocrypt.Audit.Report.pdf)       |✅ Yes          |❌ No          |❓ Unknown      |✅ Yes         |

Keep in mind that while Picocrypt does most things better than other tools, it's not a one-size-fits-all and doesn't try to be. There are use cases such as full-disk encryption where VeraCrypt and BitLocker would be a better (and the only) choice. So while Picocrypt is a great choice for the majority of people doing file encryption, you should still do your own research and use what's best for you.

# Features
Picocrypt is a very simple tool and most users will intuitively understand how to use it in a few seconds. On a basic level, simply dropping your files, entering a password, and hitting Encrypt is all that's needed to encrypt your files. Dropping the output back into Picocrypt, entering the password, and hitting Decrypt is all that's needed to decrypt those files. Pretty simple, right?

While being simple, Picocrypt also strives to be powerful in the hands of knowledgeable and advanced users. Thus, there are some additional options that you may use to suit your needs. Read through their descriptions carefully as some of them can be complex to use correctly.
<ul>
	<li><strong>Password generator</strong>: Picocrypt provides a secure password generator that you can use to create cryptographically secure passwords. You can customize the password length, as well as the types of characters to include.</li>
	<li><strong>Comments</strong>: Use this to store <strong>non-sensitive</strong> text along with the volume (<strong>it won't be encrypted</strong> and simply can't be by design). For example, you can put a description of the file you're encrypting before sending it to someone. When the person you sent it to drops the volume into Picocrypt, your description will be shown to that person. Or, if you're backing up personal files, you can give a description of the volume's contents so you can quickly remind yourself without having to fully decrypt. Since comments are neither encrypted nor authenticated, it can be freely read and modified by an attacker. <strong>Thus, it should only be used for non-sensitive, informational purposes in trusted environments.</strong></li>
	<li><strong>Keyfiles</strong>: Picocrypt supports the use of keyfiles as an additional form of authentication (or the only form of authentication). Any file can be used as a keyfile, and a secure keyfile generator is provided for convenience. Not only can you use multiple keyfiles, but you can also require the correct order of keyfiles to be present for a successful decryption to occur. A particularly good use case of multiple keyfiles is creating a shared volume, where each person holds a keyfile, and all of them (and their keyfiles) must be present to decrypt the shared volume. By checking the "Require correct order" box and dropping your keyfile in last, you can also ensure that you'll always be the one clicking the Decrypt button. <strong>Use the keyfile generator whenever possible for the best security.</strong></li>
	<li><strong>Paranoid mode</strong>: Using this mode will encrypt your data with both XChaCha20 and Serpent in a cascade fashion, and use HMAC-SHA3 to authenticate data instead of BLAKE2b. Argon2 parameters will be increased significantly as well. This is recommended for protecting top-secret files and provides the highest level of practical security attainable. For a hacker to break into your encrypted data, both the XChaCha20 cipher and the Serpent cipher must be broken, assuming you've chosen a good password. It's safe to say that in this mode, your files are impossible to crack. Keep in mind, however, that this mode is slower and isn't really necessary unless you're a government agent with classified data or a whistleblower under threat.</li>
	<li><strong>Reed-Solomon</strong>: This feature is very useful if you are planning to archive important data on a cloud provider or external medium for a long time. If checked, Picocrypt will use the Reed-Solomon error correction code to add 8 extra bytes for every 128 bytes of data to prevent file corruption. This means that up to ~3% of your file can corrupt and Picocrypt will still be able to correct the errors and decrypt your files with no corruption. Of course, if your file corrupts very badly (e.g., you dropped your hard drive), Picocrypt won't be able to fully recover your files, but it will try its best to recover what it can. Note that this option will slow down encryption and decryption speeds significantly.</li>
	<li><strong>Force decrypt</strong>: Picocrypt automatically checks for file integrity upon decryption. If the file has been modified or is corrupted, Picocrypt will automatically delete the output for the user's safety. If you would like to override these safeguards, check this option. Also, if this option is checked and the Reed-Solomon feature was used on the encrypted volume, Picocrypt will attempt to recover as much of the file as possible during decryption.</li>
	<li><strong>Split into chunks</strong>: Don't feel like dealing with gargantuan files? No worries! With Picocrypt, you can choose to split your output file into custom-sized chunks, so large files can become more manageable and easier to upload to cloud providers. Simply choose a unit (KiB, MiB, GiB, or TiB) and enter your desired chunk size for that unit. To decrypt the chunks, simply drag one of them into Picocrypt and the chunks will be automatically recombined during decryption.</li>
	<li><strong>Compress files</strong>: By default, Picocrypt uses a zip file with no compression to quickly merge files together when encrypting multiple files. If you would like to compress these files, however, simply check this box and the standard Deflate compression algorithm will be applied during encryption.</li>
	<li><strong>Deniability</strong>: Picocrypt volumes typically follow an easily recognizable header format. However, if you want to hide the fact that you are encrypting your files, enabling this option will provide you with plausible deniability. The output volume will indistinguishable from a stream of random bytes, and no one can prove it is a volume without the correct password. This can be useful in an authoritarian country where the only way to transport your files safely is if they don't "exist" in the first place. Keep in mind that this mode slows down encryption and decryption speeds, requires you to manually rename the volume afterward, renders comments useless, and also voids the extra security precautions of the paranoid mode, so you should only use it if absolutely necessary. <strong>If you've never heard of plausible deniability, this feature is not for you.</strong></li>
	<li><strong>Recursively</strong>: If you want to encrypt and/or decrypt a large set of files individually, this option will tell Picocrypt to go through every recursive file that you drop in and encrypt/decrypt it separately. This is useful, for example, if you are encrypting thousands of large documents and want to be able to decrypt any one of them in particular without having to download and decrypt the entire set of documents. <strong>Keep in mind that this is a very complex feature that should only be used if you know what you are doing.</strong></li>
</ul>

# Security
For more information on how Picocrypt handles cryptography, see <a href="Internals.md">Internals</a> for the technical details. If you're worried about the safety of me or this project, let me assure you that this repository won't be hijacked or backdoored. I have 2FA (TOTP) enabled on all accounts with a tie to Picocrypt (GitHub, etc.), in addition to full-disk encryption on all of my portable devices. For further hardening, Picocrypt uses my isolated forks of dependencies and I fetch upstream only when I have taken a look at the changes and believe that there aren't any security issues. This means that if a dependency gets hacked or deleted by the author, Picocrypt will be using my fork of it and remain completely unaffected. I've also meticulously gone through every single setting in the Picocrypt organization and repos, locking down access behind multiple layers of security such as read-only base-level member permissions, required PRs and mandatory approvals (which no one can do but me), mandatory CODEOWNERS approvals, and I'm the only member of the Picocrypt organization and repos (except for PicoGo). You can feel confident about using Picocrypt as long as you understand:

<strong>Picocrypt operates under the assumption that the host machine it is running on is safe and trusted. If that is not the case, no piece of software will be secure, and you will have much bigger problems to worry about. As such, Picocrypt is designed for the offline security of volumes and does not attempt to protect against side-channel analysis.</strong>

# Donations
When I was actively developing Picocrypt, I accepted donations, but now that Picocrypt is complete and production-ready, there's no need anymore. Instead, take your time and effort to share the love of Picocrypt with others. Donations are nice, but being able to help others is a lot more valuable to me than a few spare dollars. Knowing that Picocrypt is helping people secure their files is plenty enough for me.

# FAQ
**Does the "Delete files" feature shred files?**

No, it doesn't shred any files and just deletes them as your file manager would. On modern storage mediums like SSDs, there is no such thing as shredding a file since wear leveling makes it impossible to overwrite a particular sector. Thus, to prevent giving users a false sense of security, Picocrypt doesn't include any shredding features at all.

**Is Picocrypt quantum-secure?**

Yes, Picocrypt is secure against quantum computers. All of the cryptography used in Picocrypt works off of a private key, and private-key cryptography is considered to be resistant against all current and future developments, including quantum computers.

# License
All original code (non-forked repositories) in the [Picocrypt organization](https://github.com/orgs/Picocrypt/repositories) is licensed under **GPL-3.0-only**. This includes the GUI, CLI, and web application. Forked repositories retain their respective upstream licenses.

# Acknowledgements
A thank you from the bottom of my heart to the significant contributors on [Open Collective](https://opencollective.com/picocrypt):
<ul>
	<li><strong>Mikołaj ($1674)</strong></li>
	<li><strong>Guest ($842)</strong></li>
	<li><strong>YellowNight ($818)</strong></li>
	<li>Incognito ($135)</li>
	<li>akp ($98)</li>
	<li>JC ($90)</li>
	<li>evelian ($50)</li>
	<li>jp26 ($50)</li>
	<li>guest-116103ad ($50)</li>
	<li>Guest ($27)</li>
	<li>Gittan Pade ($25)</li>
	<li>Pokabu ($20)</li>
	<li>oli ($20)</li>
	<li>Bright ($20)</li>
	<li>Incognito ($20)</li>
	<li>Guest ($20)</li>
	<li>JokiBlue ($20)</li>
	<li>Guest ($20)</li>
	<li>Markus ($15)</li>
	<li>EN ($15)</li>
	<li>Guest ($13)</li>
	<li>Tybbs ($10)</li>
	<li>N. Chin ($10)</li>
	<li>Manjot ($10)</li>
	<li>Phil P. ($10)</li>
	<li>Raymond ($10)</li>
	<li>Cohen ($10)</li>
	<li>EuA ($10)</li>
	<li>geevade ($10)</li>
	<li>Guest ($10)</li>
	<li>Hilebrinest ($10)</li>
	<li>gabu.gu ($10)</li>
	<li>Boat ($10)</li>
	<li>Guest ($10)</li>
</ul>
<!-- Last updated July 12, 2024 -->

Also, a huge thanks to the following people who were the first to donate and support Picocrypt:
<ul>
	<li>W.Graham</li>
	<li>N. Chin</li>
	<li>Manjot</li>
	<li>Phil P.</li>
	<li>E. Zahard</li>
</ul>

Finally, thanks to these people/organizations for helping me out when needed:
<ul>
	<li>u/greenreddits for constant feedback and support</li>
	<li>u/Tall_Escape for helping me test Picocrypt</li>
	<li>u/NSABackdoors for doing plenty of testing</li>
	<li>@samuel-lucas6 for feedback, suggestions, and support</li>
	<li>@AsuxAX and @Minibus93 for testing new features</li>
	<li>@mdanish-kh and @stephengillie for WinGet package</li>
	<li>@Retengart for helping create the Flatpak and housekeeping it</li>
	<li><a href="https://privacyguides.org">Privacy Guides</a> for (previously) listing Picocrypt</li>
	<li><a href="https://www.radicallyopensecurity.com/">Radically Open Security</a> for auditing Picocrypt</li>
</ul>
</file>

<file path="VERSION">
1.49
</file>

</files>
